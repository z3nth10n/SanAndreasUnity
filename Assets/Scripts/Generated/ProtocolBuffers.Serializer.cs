// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

#pragma warning disable 0472, 0162

namespace UnityEngine
{
    public partial class Vector2Serialized
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector2 Deserialize(Stream stream)
        {
            Vector2 instance = new Vector2();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector2 DeserializeLengthDelimited(Stream stream)
        {
            Vector2 instance = new Vector2();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector2 DeserializeLength(Stream stream, int length)
        {
            Vector2 instance = new Vector2();
            DeserializeLength(stream, length, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Vector2 Deserialize(byte[] buffer)
        {
            Vector2 instance = new Vector2();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static Vector2 Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Vector2 instance = new Vector2();
            Deserialize(obj, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static Vector2 Deserialize(string json)
        {
            Vector2 instance = new Vector2();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static UnityEngine.Vector2 Deserialize(byte[] buffer, ref UnityEngine.Vector2 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Vector2 Deserialize(Stream stream, ref UnityEngine.Vector2 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Vector2 DeserializeLengthDelimited(Stream stream, ref UnityEngine.Vector2 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Vector2 DeserializeLength(Stream stream, int length, ref UnityEngine.Vector2 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static UnityEngine.Vector2 Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ref UnityEngine.Vector2 instance)
        {
            instance.x = 0f;
            instance.y = 0f;

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "x":
                        instance.x = (float)(property.Value);
                        break;

                    case "y":
                        instance.y = (float)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Vector2 instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.x);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.y);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Vector2 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Vector2 instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, Vector2 instance)
        {
            writer.Write("{");
            writer.Write("\"x\":");
            writer.Write(instance.x.ToString());
            writer.Write(",");
            writer.Write("\"y\":");
            writer.Write(instance.y.ToString());
            writer.Write("}");
        }
    }

    public partial class Vector3Serialized
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector3 Deserialize(Stream stream)
        {
            Vector3 instance = new Vector3();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector3 DeserializeLengthDelimited(Stream stream)
        {
            Vector3 instance = new Vector3();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector3 DeserializeLength(Stream stream, int length)
        {
            Vector3 instance = new Vector3();
            DeserializeLength(stream, length, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Vector3 Deserialize(byte[] buffer)
        {
            Vector3 instance = new Vector3();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static Vector3 Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Vector3 instance = new Vector3();
            Deserialize(obj, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static Vector3 Deserialize(string json)
        {
            Vector3 instance = new Vector3();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static UnityEngine.Vector3 Deserialize(byte[] buffer, ref UnityEngine.Vector3 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Vector3 Deserialize(Stream stream, ref UnityEngine.Vector3 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Vector3 DeserializeLengthDelimited(Stream stream, ref UnityEngine.Vector3 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Vector3 DeserializeLength(Stream stream, int length, ref UnityEngine.Vector3 instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static UnityEngine.Vector3 Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ref UnityEngine.Vector3 instance)
        {
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "x":
                        instance.x = (float)(property.Value);
                        break;

                    case "y":
                        instance.y = (float)(property.Value);
                        break;

                    case "z":
                        instance.z = (float)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Vector3 instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.x);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.y);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.z);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Vector3 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Vector3 instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, Vector3 instance)
        {
            writer.Write("{");
            writer.Write("\"x\":");
            writer.Write(instance.x.ToString());
            writer.Write(",");
            writer.Write("\"y\":");
            writer.Write(instance.y.ToString());
            writer.Write(",");
            writer.Write("\"z\":");
            writer.Write(instance.z.ToString());
            writer.Write("}");
        }
    }

    public partial class ColorSerialized
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Color Deserialize(Stream stream)
        {
            Color instance = new Color();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Color DeserializeLengthDelimited(Stream stream)
        {
            Color instance = new Color();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Color DeserializeLength(Stream stream, int length)
        {
            Color instance = new Color();
            DeserializeLength(stream, length, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Color Deserialize(byte[] buffer)
        {
            Color instance = new Color();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static Color Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Color instance = new Color();
            Deserialize(obj, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static Color Deserialize(string json)
        {
            Color instance = new Color();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static UnityEngine.Color Deserialize(byte[] buffer, ref UnityEngine.Color instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Color Deserialize(Stream stream, ref UnityEngine.Color instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.r = 0f;
            instance.g = 0f;
            instance.b = 0f;
            instance.a = 0f;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.r = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.g = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.b = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.a = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Color DeserializeLengthDelimited(Stream stream, ref UnityEngine.Color instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.r = 0f;
            instance.g = 0f;
            instance.b = 0f;
            instance.a = 0f;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.r = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.g = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.b = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.a = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Color DeserializeLength(Stream stream, int length, ref UnityEngine.Color instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.r = 0f;
            instance.g = 0f;
            instance.b = 0f;
            instance.a = 0f;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.r = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.g = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.b = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.a = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static UnityEngine.Color Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ref UnityEngine.Color instance)
        {
            instance.r = 0f;
            instance.g = 0f;
            instance.b = 0f;
            instance.a = 0f;

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "r":
                        instance.r = (float)(property.Value);
                        break;

                    case "g":
                        instance.g = (float)(property.Value);
                        break;

                    case "b":
                        instance.b = (float)(property.Value);
                        break;

                    case "a":
                        instance.a = (float)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Color instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.r);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.g);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.b);
            // Key for field: 4, Fixed32
            stream.WriteByte(37);
            bw.Write(instance.a);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Color instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Color instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, Color instance)
        {
            writer.Write("{");
            writer.Write("\"r\":");
            writer.Write(instance.r.ToString());
            writer.Write(",");
            writer.Write("\"g\":");
            writer.Write(instance.g.ToString());
            writer.Write(",");
            writer.Write("\"b\":");
            writer.Write(instance.b.ToString());
            writer.Write(",");
            writer.Write("\"a\":");
            writer.Write(instance.a.ToString());
            writer.Write("}");
        }
    }

    public partial class QuaternionSerialized
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Quaternion Deserialize(Stream stream)
        {
            Quaternion instance = new Quaternion();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Quaternion DeserializeLengthDelimited(Stream stream)
        {
            Quaternion instance = new Quaternion();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Quaternion DeserializeLength(Stream stream, int length)
        {
            Quaternion instance = new Quaternion();
            DeserializeLength(stream, length, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Quaternion Deserialize(byte[] buffer)
        {
            Quaternion instance = new Quaternion();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static Quaternion Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Quaternion instance = new Quaternion();
            Deserialize(obj, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static Quaternion Deserialize(string json)
        {
            Quaternion instance = new Quaternion();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static UnityEngine.Quaternion Deserialize(byte[] buffer, ref UnityEngine.Quaternion instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Quaternion Deserialize(Stream stream, ref UnityEngine.Quaternion instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            instance.w = 0f;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.z = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.w = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Quaternion DeserializeLengthDelimited(Stream stream, ref UnityEngine.Quaternion instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            instance.w = 0f;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.z = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.w = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Quaternion DeserializeLength(Stream stream, int length, ref UnityEngine.Quaternion instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            instance.w = 0f;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.x = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.z = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.w = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static UnityEngine.Quaternion Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ref UnityEngine.Quaternion instance)
        {
            instance.x = 0f;
            instance.y = 0f;
            instance.z = 0f;
            instance.w = 0f;

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "x":
                        instance.x = (float)(property.Value);
                        break;

                    case "y":
                        instance.y = (float)(property.Value);
                        break;

                    case "z":
                        instance.z = (float)(property.Value);
                        break;

                    case "w":
                        instance.w = (float)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Quaternion instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.x);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.y);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.z);
            // Key for field: 4, Fixed32
            stream.WriteByte(37);
            bw.Write(instance.w);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Quaternion instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Quaternion instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, Quaternion instance)
        {
            writer.Write("{");
            writer.Write("\"x\":");
            writer.Write(instance.x.ToString());
            writer.Write(",");
            writer.Write("\"y\":");
            writer.Write(instance.y.ToString());
            writer.Write(",");
            writer.Write("\"z\":");
            writer.Write(instance.z.ToString());
            writer.Write(",");
            writer.Write("\"w\":");
            writer.Write(instance.w.ToString());
            writer.Write("}");
        }
    }

    public partial class RaySerialized
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Ray Deserialize(Stream stream)
        {
            Ray instance = new Ray();
            Deserialize(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Ray DeserializeLengthDelimited(Stream stream)
        {
            Ray instance = new Ray();
            DeserializeLengthDelimited(stream, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Ray DeserializeLength(Stream stream, int length)
        {
            Ray instance = new Ray();
            DeserializeLength(stream, length, ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Ray Deserialize(byte[] buffer)
        {
            Ray instance = new Ray();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static Ray Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Ray instance = new Ray();
            Deserialize(obj, ref instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static Ray Deserialize(string json)
        {
            Ray instance = new Ray();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), ref instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static UnityEngine.Ray Deserialize(byte[] buffer, ref UnityEngine.Ray instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, ref instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Ray Deserialize(Stream stream, ref UnityEngine.Ray instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        {
                            var a = instance.origin;
                            instance.origin = UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref a);
                        }
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        {
                            var a = instance.direction;
                            instance.direction = UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref a);
                        }
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Ray DeserializeLengthDelimited(Stream stream, ref UnityEngine.Ray instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        {
                            var a = instance.origin;
                            instance.origin = UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref a);
                        }
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        {
                            var a = instance.direction;
                            instance.direction = UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref a);
                        }
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static UnityEngine.Ray DeserializeLength(Stream stream, int length, ref UnityEngine.Ray instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        {
                            var a = instance.origin;
                            instance.origin = UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref a);
                        }
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        {
                            var a = instance.direction;
                            instance.direction = UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref a);
                        }
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static UnityEngine.Ray Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ref UnityEngine.Ray instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "origin":
                        {
                            var a = instance.origin;
                            instance.origin = UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref a);
                        }
                        break;

                    case "direction":
                        {
                            var a = instance.direction;
                            instance.direction = UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref a);
                        }
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Ray instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.origin);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.direction);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Ray instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Ray instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, Ray instance)
        {
            writer.Write("{");
            writer.Write("\"origin\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.origin);

            writer.Write(",");
            writer.Write("\"direction\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.direction);

            writer.Write("}");
        }
    }
}

namespace ProtoBuf
{
    [System.Serializable()]
    public partial class ConnectRequestData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectRequestData Deserialize(Stream stream)
        {
            ConnectRequestData instance = new ConnectRequestData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectRequestData DeserializeLengthDelimited(Stream stream)
        {
            ConnectRequestData instance = new ConnectRequestData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectRequestData DeserializeLength(Stream stream, int length)
        {
            ConnectRequestData instance = new ConnectRequestData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ConnectRequestData Deserialize(byte[] buffer)
        {
            ConnectRequestData instance = new ConnectRequestData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static ConnectRequestData Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            ConnectRequestData instance = new ConnectRequestData();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static ConnectRequestData Deserialize(string json)
        {
            ConnectRequestData instance = new ConnectRequestData();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.ConnectRequestData Deserialize(byte[] buffer, ProtoBuf.ConnectRequestData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectRequestData Deserialize(Stream stream, ProtoBuf.ConnectRequestData instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ModelId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectRequestData DeserializeLengthDelimited(Stream stream, ProtoBuf.ConnectRequestData instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ModelId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectRequestData DeserializeLength(Stream stream, int length, ProtoBuf.ConnectRequestData instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ModelId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.ConnectRequestData Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.ConnectRequestData instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "ModelId":
                        instance.ModelId = (int)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ConnectRequestData instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.ModelId);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ConnectRequestData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ConnectRequestData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, ConnectRequestData instance)
        {
            writer.Write("{");
            writer.Write("\"ModelId\":");
            writer.Write(instance.ModelId.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class PlayerConnected
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerConnected Deserialize(Stream stream)
        {
            PlayerConnected instance = new PlayerConnected();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerConnected DeserializeLengthDelimited(Stream stream)
        {
            PlayerConnected instance = new PlayerConnected();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerConnected DeserializeLength(Stream stream, int length)
        {
            PlayerConnected instance = new PlayerConnected();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerConnected Deserialize(byte[] buffer)
        {
            PlayerConnected instance = new PlayerConnected();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static PlayerConnected Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            PlayerConnected instance = new PlayerConnected();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static PlayerConnected Deserialize(string json)
        {
            PlayerConnected instance = new PlayerConnected();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.PlayerConnected Deserialize(byte[] buffer, ProtoBuf.PlayerConnected instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.PlayerConnected Deserialize(Stream stream, ProtoBuf.PlayerConnected instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.PlayerConnected DeserializeLengthDelimited(Stream stream, ProtoBuf.PlayerConnected instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.PlayerConnected DeserializeLength(Stream stream, int length, ProtoBuf.PlayerConnected instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.PlayerConnected Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.PlayerConnected instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Player":
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Player.PlayerInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Player);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerConnected instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Player != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                msField.SetLength(0);
                ProtoBuf.Player.PlayerInfo.Serialize(msField, instance.Player);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerConnected instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerConnected instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, PlayerConnected instance)
        {
            writer.Write("{");
            writer.Write("\"Player\":");
            if (instance.Player != null)
            {
                ProtoBuf.Player.PlayerInfo.SerializeJson(writer, instance.Player);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class PlayerDisconnected
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerDisconnected Deserialize(Stream stream)
        {
            PlayerDisconnected instance = new PlayerDisconnected();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerDisconnected DeserializeLengthDelimited(Stream stream)
        {
            PlayerDisconnected instance = new PlayerDisconnected();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerDisconnected DeserializeLength(Stream stream, int length)
        {
            PlayerDisconnected instance = new PlayerDisconnected();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerDisconnected Deserialize(byte[] buffer)
        {
            PlayerDisconnected instance = new PlayerDisconnected();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static PlayerDisconnected Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            PlayerDisconnected instance = new PlayerDisconnected();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static PlayerDisconnected Deserialize(string json)
        {
            PlayerDisconnected instance = new PlayerDisconnected();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.PlayerDisconnected Deserialize(byte[] buffer, ProtoBuf.PlayerDisconnected instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.PlayerDisconnected Deserialize(Stream stream, ProtoBuf.PlayerDisconnected instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Reason = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.PlayerDisconnected DeserializeLengthDelimited(Stream stream, ProtoBuf.PlayerDisconnected instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Reason = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.PlayerDisconnected DeserializeLength(Stream stream, int length, ProtoBuf.PlayerDisconnected instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Reason = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.PlayerDisconnected Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.PlayerDisconnected instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Player":
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Player.PlayerInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Player);
                        break;

                    case "Reason":
                        instance.Reason = (string)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerDisconnected instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Player != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                msField.SetLength(0);
                ProtoBuf.Player.PlayerInfo.Serialize(msField, instance.Player);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);
            }
            if (instance.Reason != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Reason));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerDisconnected instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerDisconnected instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, PlayerDisconnected instance)
        {
            writer.Write("{");
            writer.Write("\"Player\":");
            if (instance.Player != null)
            {
                ProtoBuf.Player.PlayerInfo.SerializeJson(writer, instance.Player);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"Reason\":");
            if (instance.Reason != null)
            {
                writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.Reason).ToString(global::Newtonsoft.Json.Formatting.None));
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class ServerChat
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ServerChat Deserialize(Stream stream)
        {
            ServerChat instance = new ServerChat();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ServerChat DeserializeLengthDelimited(Stream stream)
        {
            ServerChat instance = new ServerChat();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ServerChat DeserializeLength(Stream stream, int length)
        {
            ServerChat instance = new ServerChat();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ServerChat Deserialize(byte[] buffer)
        {
            ServerChat instance = new ServerChat();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static ServerChat Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            ServerChat instance = new ServerChat();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static ServerChat Deserialize(string json)
        {
            ServerChat instance = new ServerChat();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.ServerChat Deserialize(byte[] buffer, ProtoBuf.ServerChat instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ServerChat Deserialize(Stream stream, ProtoBuf.ServerChat instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ServerChat DeserializeLengthDelimited(Stream stream, ProtoBuf.ServerChat instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ServerChat DeserializeLength(Stream stream, int length, ProtoBuf.ServerChat instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.ServerChat Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.ServerChat instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Message":
                        instance.Message = (string)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ServerChat instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Message != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Message));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ServerChat instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ServerChat instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, ServerChat instance)
        {
            writer.Write("{");
            writer.Write("\"Message\":");
            if (instance.Message != null)
            {
                writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.Message).ToString(global::Newtonsoft.Json.Formatting.None));
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }
}

namespace ProtoBuf.Player
{
    [System.Serializable()]
    public partial class PlayerInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerInfo Deserialize(Stream stream)
        {
            PlayerInfo instance = new PlayerInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerInfo DeserializeLengthDelimited(Stream stream)
        {
            PlayerInfo instance = new PlayerInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerInfo DeserializeLength(Stream stream, int length)
        {
            PlayerInfo instance = new PlayerInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerInfo Deserialize(byte[] buffer)
        {
            PlayerInfo instance = new PlayerInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static PlayerInfo Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            PlayerInfo instance = new PlayerInfo();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static PlayerInfo Deserialize(string json)
        {
            PlayerInfo instance = new PlayerInfo();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Player.PlayerInfo Deserialize(byte[] buffer, ProtoBuf.Player.PlayerInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerInfo Deserialize(Stream stream, ProtoBuf.Player.PlayerInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Modelid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerInfo DeserializeLengthDelimited(Stream stream, ProtoBuf.Player.PlayerInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Modelid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerInfo DeserializeLength(Stream stream, int length, ProtoBuf.Player.PlayerInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Modelid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Player.PlayerInfo Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Player.PlayerInfo instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "UserId":
                        instance.UserId = (ulong)(property.Value);
                        break;

                    case "Username":
                        instance.Username = (string)(property.Value);
                        break;

                    case "Modelid":
                        instance.Modelid = (int)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerInfo instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.UserId);
            if (instance.Username != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Username));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.Modelid);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, PlayerInfo instance)
        {
            writer.Write("{");
            writer.Write("\"UserId\":");
            writer.Write(instance.UserId.ToString());
            writer.Write(",");
            writer.Write("\"Username\":");
            if (instance.Username != null)
            {
                writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.Username).ToString(global::Newtonsoft.Json.Formatting.None));
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"Modelid\":");
            writer.Write(instance.Modelid.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class PlayerSpawn
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerSpawn Deserialize(Stream stream)
        {
            PlayerSpawn instance = new PlayerSpawn();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerSpawn DeserializeLengthDelimited(Stream stream)
        {
            PlayerSpawn instance = new PlayerSpawn();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerSpawn DeserializeLength(Stream stream, int length)
        {
            PlayerSpawn instance = new PlayerSpawn();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerSpawn Deserialize(byte[] buffer)
        {
            PlayerSpawn instance = new PlayerSpawn();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static PlayerSpawn Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            PlayerSpawn instance = new PlayerSpawn();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static PlayerSpawn Deserialize(string json)
        {
            PlayerSpawn instance = new PlayerSpawn();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Player.PlayerSpawn Deserialize(byte[] buffer, ProtoBuf.Player.PlayerSpawn instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerSpawn Deserialize(Stream stream, ProtoBuf.Player.PlayerSpawn instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.PedestrianState == null)
                            instance.PedestrianState = ProtoBuf.Player.PlayerPedestrianState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerPedestrianState.DeserializeLengthDelimited(stream, instance.PedestrianState);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.PassengerState == null)
                            instance.PassengerState = ProtoBuf.Player.PlayerPassengerState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerPassengerState.DeserializeLengthDelimited(stream, instance.PassengerState);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.IsLocal = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerSpawn DeserializeLengthDelimited(Stream stream, ProtoBuf.Player.PlayerSpawn instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.PedestrianState == null)
                            instance.PedestrianState = ProtoBuf.Player.PlayerPedestrianState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerPedestrianState.DeserializeLengthDelimited(stream, instance.PedestrianState);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.PassengerState == null)
                            instance.PassengerState = ProtoBuf.Player.PlayerPassengerState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerPassengerState.DeserializeLengthDelimited(stream, instance.PassengerState);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.IsLocal = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerSpawn DeserializeLength(Stream stream, int length, ProtoBuf.Player.PlayerSpawn instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerInfo.DeserializeLengthDelimited(stream, instance.Player);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.PedestrianState == null)
                            instance.PedestrianState = ProtoBuf.Player.PlayerPedestrianState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerPedestrianState.DeserializeLengthDelimited(stream, instance.PedestrianState);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.PassengerState == null)
                            instance.PassengerState = ProtoBuf.Player.PlayerPassengerState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Player.PlayerPassengerState.DeserializeLengthDelimited(stream, instance.PassengerState);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.IsLocal = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Player.PlayerSpawn Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Player.PlayerSpawn instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Networkable":
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Networkable);
                        break;

                    case "Player":
                        if (instance.Player == null)
                            instance.Player = ProtoBuf.Player.PlayerInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Player.PlayerInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Player);
                        break;

                    case "PedestrianState":
                        if (instance.PedestrianState == null)
                            instance.PedestrianState = ProtoBuf.Player.PlayerPedestrianState.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Player.PlayerPedestrianState.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.PedestrianState);
                        break;

                    case "PassengerState":
                        if (instance.PassengerState == null)
                            instance.PassengerState = ProtoBuf.Player.PlayerPassengerState.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Player.PlayerPassengerState.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.PassengerState);
                        break;

                    case "IsLocal":
                        instance.IsLocal = (bool)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerSpawn instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Networkable == null)
                throw new ArgumentNullException("Networkable", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            msField.SetLength(0);
            ProtoBuf.NetworkableInfo.Serialize(msField, instance.Networkable);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            if (instance.Player != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                msField.SetLength(0);
                ProtoBuf.Player.PlayerInfo.Serialize(msField, instance.Player);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);
            }
            if (instance.PedestrianState != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                msField.SetLength(0);
                ProtoBuf.Player.PlayerPedestrianState.Serialize(msField, instance.PedestrianState);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                stream.Write(msField.GetBuffer(), 0, (int)length3);
            }
            if (instance.PassengerState != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                msField.SetLength(0);
                ProtoBuf.Player.PlayerPassengerState.Serialize(msField, instance.PassengerState);
                // Length delimited byte array
                uint length5 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                stream.Write(msField.GetBuffer(), 0, (int)length5);
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsLocal);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerSpawn instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerSpawn instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, PlayerSpawn instance)
        {
            writer.Write("{");
            writer.Write("\"Networkable\":");
            if (instance.Networkable == null)
                throw new ArgumentNullException("Networkable", "Required by proto specification.");
            ProtoBuf.NetworkableInfo.SerializeJson(writer, instance.Networkable);

            writer.Write(",");
            writer.Write("\"Player\":");
            if (instance.Player != null)
            {
                ProtoBuf.Player.PlayerInfo.SerializeJson(writer, instance.Player);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"PedestrianState\":");
            if (instance.PedestrianState != null)
            {
                ProtoBuf.Player.PlayerPedestrianState.SerializeJson(writer, instance.PedestrianState);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"PassengerState\":");
            if (instance.PassengerState != null)
            {
                ProtoBuf.Player.PlayerPassengerState.SerializeJson(writer, instance.PassengerState);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"IsLocal\":");
            writer.Write(instance.IsLocal ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class PlayerPedestrianState
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerPedestrianState Deserialize(Stream stream)
        {
            PlayerPedestrianState instance = new PlayerPedestrianState();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerPedestrianState DeserializeLengthDelimited(Stream stream)
        {
            PlayerPedestrianState instance = new PlayerPedestrianState();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerPedestrianState DeserializeLength(Stream stream, int length)
        {
            PlayerPedestrianState instance = new PlayerPedestrianState();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerPedestrianState Deserialize(byte[] buffer)
        {
            PlayerPedestrianState instance = new PlayerPedestrianState();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static PlayerPedestrianState Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            PlayerPedestrianState instance = new PlayerPedestrianState();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static PlayerPedestrianState Deserialize(string json)
        {
            PlayerPedestrianState instance = new PlayerPedestrianState();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Player.PlayerPedestrianState Deserialize(byte[] buffer, ProtoBuf.Player.PlayerPedestrianState instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerPedestrianState Deserialize(Stream stream, ProtoBuf.Player.PlayerPedestrianState instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 Fixed64
                    case 17:
                        instance.Timestamp = br.ReadDouble();
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Movement);
                        continue;
                    // Field 5 Fixed32
                    case 45:
                        instance.Yaw = br.ReadSingle();
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.Running = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerPedestrianState DeserializeLengthDelimited(Stream stream, ProtoBuf.Player.PlayerPedestrianState instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 Fixed64
                    case 17:
                        instance.Timestamp = br.ReadDouble();
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Movement);
                        continue;
                    // Field 5 Fixed32
                    case 45:
                        instance.Yaw = br.ReadSingle();
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.Running = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerPedestrianState DeserializeLength(Stream stream, int length, ProtoBuf.Player.PlayerPedestrianState instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 Fixed64
                    case 17:
                        instance.Timestamp = br.ReadDouble();
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Movement);
                        continue;
                    // Field 5 Fixed32
                    case 45:
                        instance.Yaw = br.ReadSingle();
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.Running = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Player.PlayerPedestrianState Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Player.PlayerPedestrianState instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Networkable":
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Networkable);
                        break;

                    case "Timestamp":
                        instance.Timestamp = (double)(property.Value);
                        break;

                    case "Position":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Position);
                        break;

                    case "Movement":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Movement);
                        break;

                    case "Yaw":
                        instance.Yaw = (float)(property.Value);
                        break;

                    case "Running":
                        instance.Running = (bool)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerPedestrianState instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Networkable != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                msField.SetLength(0);
                ProtoBuf.NetworkableInfo.Serialize(msField, instance.Networkable);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);
            }
            // Key for field: 2, Fixed64
            stream.WriteByte(17);
            bw.Write(instance.Timestamp);
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.Position);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            stream.Write(msField.GetBuffer(), 0, (int)length3);

            // Key for field: 4, LengthDelimited
            stream.WriteByte(34);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.Movement);
            // Length delimited byte array
            uint length4 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
            stream.Write(msField.GetBuffer(), 0, (int)length4);

            // Key for field: 5, Fixed32
            stream.WriteByte(45);
            bw.Write(instance.Yaw);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Running);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerPedestrianState instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerPedestrianState instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, PlayerPedestrianState instance)
        {
            writer.Write("{");
            writer.Write("\"Networkable\":");
            if (instance.Networkable != null)
            {
                ProtoBuf.NetworkableInfo.SerializeJson(writer, instance.Networkable);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"Timestamp\":");
            writer.Write(instance.Timestamp.ToString());
            writer.Write(",");
            writer.Write("\"Position\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.Position);

            writer.Write(",");
            writer.Write("\"Movement\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.Movement);

            writer.Write(",");
            writer.Write("\"Yaw\":");
            writer.Write(instance.Yaw.ToString());
            writer.Write(",");
            writer.Write("\"Running\":");
            writer.Write(instance.Running ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class PlayerPassengerState
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerPassengerState Deserialize(Stream stream)
        {
            PlayerPassengerState instance = new PlayerPassengerState();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerPassengerState DeserializeLengthDelimited(Stream stream)
        {
            PlayerPassengerState instance = new PlayerPassengerState();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerPassengerState DeserializeLength(Stream stream, int length)
        {
            PlayerPassengerState instance = new PlayerPassengerState();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerPassengerState Deserialize(byte[] buffer)
        {
            PlayerPassengerState instance = new PlayerPassengerState();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static PlayerPassengerState Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            PlayerPassengerState instance = new PlayerPassengerState();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static PlayerPassengerState Deserialize(string json)
        {
            PlayerPassengerState instance = new PlayerPassengerState();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Player.PlayerPassengerState Deserialize(byte[] buffer, ProtoBuf.Player.PlayerPassengerState instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerPassengerState Deserialize(Stream stream, ProtoBuf.Player.PlayerPassengerState instance)
        {
            instance.SeatAlignment = 0;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Vechicle == null)
                            instance.Vechicle = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Vechicle);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SeatAlignment = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerPassengerState DeserializeLengthDelimited(Stream stream, ProtoBuf.Player.PlayerPassengerState instance)
        {
            instance.SeatAlignment = 0;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Vechicle == null)
                            instance.Vechicle = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Vechicle);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SeatAlignment = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Player.PlayerPassengerState DeserializeLength(Stream stream, int length, ProtoBuf.Player.PlayerPassengerState instance)
        {
            instance.SeatAlignment = 0;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Vechicle == null)
                            instance.Vechicle = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Vechicle);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SeatAlignment = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Player.PlayerPassengerState Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Player.PlayerPassengerState instance)
        {
            instance.SeatAlignment = 0;

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Networkable":
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Networkable);
                        break;

                    case "Vechicle":
                        if (instance.Vechicle == null)
                            instance.Vechicle = ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Vechicle);
                        break;

                    case "SeatAlignment":
                        instance.SeatAlignment = (int)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerPassengerState instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Networkable != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                msField.SetLength(0);
                ProtoBuf.NetworkableInfo.Serialize(msField, instance.Networkable);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);
            }
            if (instance.Vechicle != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                msField.SetLength(0);
                ProtoBuf.NetworkableInfo.Serialize(msField, instance.Vechicle);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.SeatAlignment);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerPassengerState instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerPassengerState instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, PlayerPassengerState instance)
        {
            writer.Write("{");
            writer.Write("\"Networkable\":");
            if (instance.Networkable != null)
            {
                ProtoBuf.NetworkableInfo.SerializeJson(writer, instance.Networkable);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"Vechicle\":");
            if (instance.Vechicle != null)
            {
                ProtoBuf.NetworkableInfo.SerializeJson(writer, instance.Vechicle);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"SeatAlignment\":");
            writer.Write(instance.SeatAlignment.ToString());
            writer.Write("}");
        }
    }
}

namespace ProtoBuf.Vehicle
{
    [System.Serializable()]
    public partial class VehicleInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleInfo Deserialize(Stream stream)
        {
            VehicleInfo instance = new VehicleInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleInfo DeserializeLengthDelimited(Stream stream)
        {
            VehicleInfo instance = new VehicleInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleInfo DeserializeLength(Stream stream, int length)
        {
            VehicleInfo instance = new VehicleInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static VehicleInfo Deserialize(byte[] buffer)
        {
            VehicleInfo instance = new VehicleInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static VehicleInfo Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            VehicleInfo instance = new VehicleInfo();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static VehicleInfo Deserialize(string json)
        {
            VehicleInfo instance = new VehicleInfo();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Vehicle.VehicleInfo Deserialize(byte[] buffer, ProtoBuf.Vehicle.VehicleInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleInfo Deserialize(Stream stream, ProtoBuf.Vehicle.VehicleInfo instance)
        {
            if (instance.Colors == null)
                instance.Colors = new List<int>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.VehicleId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.Colors.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleInfo DeserializeLengthDelimited(Stream stream, ProtoBuf.Vehicle.VehicleInfo instance)
        {
            if (instance.Colors == null)
                instance.Colors = new List<int>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.VehicleId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.Colors.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleInfo DeserializeLength(Stream stream, int length, ProtoBuf.Vehicle.VehicleInfo instance)
        {
            if (instance.Colors == null)
                instance.Colors = new List<int>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.VehicleId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.Colors.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Vehicle.VehicleInfo Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Vehicle.VehicleInfo instance)
        {
            if (instance.Colors == null)
                instance.Colors = new List<int>();

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "VehicleId":
                        instance.VehicleId = (int)(property.Value);
                        break;

                    case "Colors":
                        // repeated
                        foreach (var val in ((global::Newtonsoft.Json.Linq.JArray)property.Value))
                        {
                            instance.Colors.Add((int)(val));
                        }
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, VehicleInfo instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.VehicleId);
            if (instance.Colors != null)
            {
                foreach (var i2 in instance.Colors)
                {
                    // Key for field: 2, Varint
                    stream.WriteByte(16);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)i2);
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(VehicleInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, VehicleInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, VehicleInfo instance)
        {
            writer.Write("{");
            writer.Write("\"VehicleId\":");
            writer.Write(instance.VehicleId.ToString());
            writer.Write(",");
            writer.Write("\"Colors\":");

            if (instance.Colors != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i2 in instance.Colors)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write(i2.ToString());
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class VehicleSpawn
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleSpawn Deserialize(Stream stream)
        {
            VehicleSpawn instance = new VehicleSpawn();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleSpawn DeserializeLengthDelimited(Stream stream)
        {
            VehicleSpawn instance = new VehicleSpawn();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleSpawn DeserializeLength(Stream stream, int length)
        {
            VehicleSpawn instance = new VehicleSpawn();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static VehicleSpawn Deserialize(byte[] buffer)
        {
            VehicleSpawn instance = new VehicleSpawn();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static VehicleSpawn Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            VehicleSpawn instance = new VehicleSpawn();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static VehicleSpawn Deserialize(string json)
        {
            VehicleSpawn instance = new VehicleSpawn();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Vehicle.VehicleSpawn Deserialize(byte[] buffer, ProtoBuf.Vehicle.VehicleSpawn instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleSpawn Deserialize(Stream stream, ProtoBuf.Vehicle.VehicleSpawn instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Info == null)
                            instance.Info = ProtoBuf.Vehicle.VehicleInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Vehicle.VehicleInfo.DeserializeLengthDelimited(stream, instance.Info);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.State == null)
                            instance.State = ProtoBuf.Vehicle.VehicleState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Vehicle.VehicleState.DeserializeLengthDelimited(stream, instance.State);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleSpawn DeserializeLengthDelimited(Stream stream, ProtoBuf.Vehicle.VehicleSpawn instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Info == null)
                            instance.Info = ProtoBuf.Vehicle.VehicleInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Vehicle.VehicleInfo.DeserializeLengthDelimited(stream, instance.Info);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.State == null)
                            instance.State = ProtoBuf.Vehicle.VehicleState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Vehicle.VehicleState.DeserializeLengthDelimited(stream, instance.State);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleSpawn DeserializeLength(Stream stream, int length, ProtoBuf.Vehicle.VehicleSpawn instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Info == null)
                            instance.Info = ProtoBuf.Vehicle.VehicleInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Vehicle.VehicleInfo.DeserializeLengthDelimited(stream, instance.Info);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.State == null)
                            instance.State = ProtoBuf.Vehicle.VehicleState.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.Vehicle.VehicleState.DeserializeLengthDelimited(stream, instance.State);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Vehicle.VehicleSpawn Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Vehicle.VehicleSpawn instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Networkable":
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Networkable);
                        break;

                    case "Info":
                        if (instance.Info == null)
                            instance.Info = ProtoBuf.Vehicle.VehicleInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Vehicle.VehicleInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Info);
                        break;

                    case "State":
                        if (instance.State == null)
                            instance.State = ProtoBuf.Vehicle.VehicleState.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.Vehicle.VehicleState.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.State);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, VehicleSpawn instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Networkable == null)
                throw new ArgumentNullException("Networkable", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            msField.SetLength(0);
            ProtoBuf.NetworkableInfo.Serialize(msField, instance.Networkable);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            if (instance.Info == null)
                throw new ArgumentNullException("Info", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            msField.SetLength(0);
            ProtoBuf.Vehicle.VehicleInfo.Serialize(msField, instance.Info);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            if (instance.State == null)
                throw new ArgumentNullException("State", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            msField.SetLength(0);
            ProtoBuf.Vehicle.VehicleState.Serialize(msField, instance.State);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            stream.Write(msField.GetBuffer(), 0, (int)length3);

            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(VehicleSpawn instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, VehicleSpawn instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, VehicleSpawn instance)
        {
            writer.Write("{");
            writer.Write("\"Networkable\":");
            if (instance.Networkable == null)
                throw new ArgumentNullException("Networkable", "Required by proto specification.");
            ProtoBuf.NetworkableInfo.SerializeJson(writer, instance.Networkable);

            writer.Write(",");
            writer.Write("\"Info\":");
            if (instance.Info == null)
                throw new ArgumentNullException("Info", "Required by proto specification.");
            ProtoBuf.Vehicle.VehicleInfo.SerializeJson(writer, instance.Info);

            writer.Write(",");
            writer.Write("\"State\":");
            if (instance.State == null)
                throw new ArgumentNullException("State", "Required by proto specification.");
            ProtoBuf.Vehicle.VehicleState.SerializeJson(writer, instance.State);

            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class VehicleState
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleState Deserialize(Stream stream)
        {
            VehicleState instance = new VehicleState();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleState DeserializeLengthDelimited(Stream stream)
        {
            VehicleState instance = new VehicleState();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleState DeserializeLength(Stream stream, int length)
        {
            VehicleState instance = new VehicleState();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static VehicleState Deserialize(byte[] buffer)
        {
            VehicleState instance = new VehicleState();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static VehicleState Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            VehicleState instance = new VehicleState();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static VehicleState Deserialize(string json)
        {
            VehicleState instance = new VehicleState();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Vehicle.VehicleState Deserialize(byte[] buffer, ProtoBuf.Vehicle.VehicleState instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleState Deserialize(Stream stream, ProtoBuf.Vehicle.VehicleState instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 Fixed64
                    case 17:
                        instance.Timestamp = br.ReadDouble();
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        UnityEngine.QuaternionSerialized.DeserializeLengthDelimited(stream, ref instance.Rotation);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Velocity);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.AngularVelocity);
                        continue;
                    // Field 6 Fixed32
                    case 53:
                        instance.Steering = br.ReadSingle();
                        continue;
                    // Field 7 Fixed32
                    case 61:
                        instance.Accelerator = br.ReadSingle();
                        continue;
                    // Field 8 Fixed32
                    case 69:
                        instance.Braking = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleState DeserializeLengthDelimited(Stream stream, ProtoBuf.Vehicle.VehicleState instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 Fixed64
                    case 17:
                        instance.Timestamp = br.ReadDouble();
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        UnityEngine.QuaternionSerialized.DeserializeLengthDelimited(stream, ref instance.Rotation);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Velocity);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.AngularVelocity);
                        continue;
                    // Field 6 Fixed32
                    case 53:
                        instance.Steering = br.ReadSingle();
                        continue;
                    // Field 7 Fixed32
                    case 61:
                        instance.Accelerator = br.ReadSingle();
                        continue;
                    // Field 8 Fixed32
                    case 69:
                        instance.Braking = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Vehicle.VehicleState DeserializeLength(Stream stream, int length, ProtoBuf.Vehicle.VehicleState instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream, instance.Networkable);
                        continue;
                    // Field 2 Fixed64
                    case 17:
                        instance.Timestamp = br.ReadDouble();
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        UnityEngine.QuaternionSerialized.DeserializeLengthDelimited(stream, ref instance.Rotation);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Velocity);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.AngularVelocity);
                        continue;
                    // Field 6 Fixed32
                    case 53:
                        instance.Steering = br.ReadSingle();
                        continue;
                    // Field 7 Fixed32
                    case 61:
                        instance.Accelerator = br.ReadSingle();
                        continue;
                    // Field 8 Fixed32
                    case 69:
                        instance.Braking = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Vehicle.VehicleState Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Vehicle.VehicleState instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Networkable":
                        if (instance.Networkable == null)
                            instance.Networkable = ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Networkable);
                        break;

                    case "Timestamp":
                        instance.Timestamp = (double)(property.Value);
                        break;

                    case "Position":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Position);
                        break;

                    case "Rotation":
                        UnityEngine.QuaternionSerialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Rotation);
                        break;

                    case "Velocity":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Velocity);
                        break;

                    case "AngularVelocity":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.AngularVelocity);
                        break;

                    case "Steering":
                        instance.Steering = (float)(property.Value);
                        break;

                    case "Accelerator":
                        instance.Accelerator = (float)(property.Value);
                        break;

                    case "Braking":
                        instance.Braking = (float)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, VehicleState instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Networkable != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                msField.SetLength(0);
                ProtoBuf.NetworkableInfo.Serialize(msField, instance.Networkable);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);
            }
            // Key for field: 2, Fixed64
            stream.WriteByte(17);
            bw.Write(instance.Timestamp);
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.Position);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            stream.Write(msField.GetBuffer(), 0, (int)length3);

            // Key for field: 4, LengthDelimited
            stream.WriteByte(34);
            msField.SetLength(0);
            UnityEngine.QuaternionSerialized.Serialize(msField, instance.Rotation);
            // Length delimited byte array
            uint length4 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
            stream.Write(msField.GetBuffer(), 0, (int)length4);

            // Key for field: 5, LengthDelimited
            stream.WriteByte(42);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.Velocity);
            // Length delimited byte array
            uint length5 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
            stream.Write(msField.GetBuffer(), 0, (int)length5);

            // Key for field: 9, LengthDelimited
            stream.WriteByte(74);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.AngularVelocity);
            // Length delimited byte array
            uint length9 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length9);
            stream.Write(msField.GetBuffer(), 0, (int)length9);

            // Key for field: 6, Fixed32
            stream.WriteByte(53);
            bw.Write(instance.Steering);
            // Key for field: 7, Fixed32
            stream.WriteByte(61);
            bw.Write(instance.Accelerator);
            // Key for field: 8, Fixed32
            stream.WriteByte(69);
            bw.Write(instance.Braking);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(VehicleState instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, VehicleState instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, VehicleState instance)
        {
            writer.Write("{");
            writer.Write("\"Networkable\":");
            if (instance.Networkable != null)
            {
                ProtoBuf.NetworkableInfo.SerializeJson(writer, instance.Networkable);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"Timestamp\":");
            writer.Write(instance.Timestamp.ToString());
            writer.Write(",");
            writer.Write("\"Position\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.Position);

            writer.Write(",");
            writer.Write("\"Rotation\":");
            UnityEngine.QuaternionSerialized.SerializeJson(writer, instance.Rotation);

            writer.Write(",");
            writer.Write("\"Velocity\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.Velocity);

            writer.Write(",");
            writer.Write("\"AngularVelocity\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.AngularVelocity);

            writer.Write(",");
            writer.Write("\"Steering\":");
            writer.Write(instance.Steering.ToString());
            writer.Write(",");
            writer.Write("\"Accelerator\":");
            writer.Write(instance.Accelerator.ToString());
            writer.Write(",");
            writer.Write("\"Braking\":");
            writer.Write(instance.Braking.ToString());
            writer.Write("}");
        }
    }
}

namespace ProtoBuf
{
    [ProtoBuf.MessageIdent(MessageIdentifier)]
    [System.Serializable()]
    public partial class ConnectRequest
    {
        public const uint MessageIdentifier = 0x00000001;

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectRequest Deserialize(Stream stream)
        {
            ConnectRequest instance = new ConnectRequest();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectRequest DeserializeLengthDelimited(Stream stream)
        {
            ConnectRequest instance = new ConnectRequest();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectRequest DeserializeLength(Stream stream, int length)
        {
            ConnectRequest instance = new ConnectRequest();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ConnectRequest Deserialize(byte[] buffer)
        {
            ConnectRequest instance = new ConnectRequest();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static ConnectRequest Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            ConnectRequest instance = new ConnectRequest();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static ConnectRequest Deserialize(string json)
        {
            ConnectRequest instance = new ConnectRequest();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.ConnectRequest Deserialize(byte[] buffer, ProtoBuf.ConnectRequest instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectRequest Deserialize(Stream stream, ProtoBuf.ConnectRequest instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Protocol = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Os = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.Data = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectRequest DeserializeLengthDelimited(Stream stream, ProtoBuf.ConnectRequest instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Protocol = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Os = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.Data = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectRequest DeserializeLength(Stream stream, int length, ProtoBuf.ConnectRequest instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Protocol = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Os = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.Data = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.ConnectRequest Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.ConnectRequest instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Protocol":
                        instance.Protocol = (int)(property.Value);
                        break;

                    case "UserId":
                        instance.UserId = (ulong)(property.Value);
                        break;

                    case "Username":
                        instance.Username = (string)(property.Value);
                        break;

                    case "Os":
                        instance.Os = (string)(property.Value);
                        break;

                    case "Data":
                        instance.Data = global::System.Convert.FromBase64String((string)(property.Value));
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ConnectRequest instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.Protocol);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.UserId);
            if (instance.Username == null)
                throw new ArgumentNullException("Username", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Username));
            if (instance.Os == null)
                throw new ArgumentNullException("Os", "Required by proto specification.");
            // Key for field: 4, LengthDelimited
            stream.WriteByte(34);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Os));
            if (instance.Data != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Data);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ConnectRequest instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ConnectRequest instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, ConnectRequest instance)
        {
            writer.Write("{");
            writer.Write("\"Protocol\":");
            writer.Write(instance.Protocol.ToString());
            writer.Write(",");
            writer.Write("\"UserId\":");
            writer.Write(instance.UserId.ToString());
            writer.Write(",");
            writer.Write("\"Username\":");
            if (instance.Username == null)
                throw new ArgumentNullException("Username", "Required by proto specification.");
            writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.Username).ToString(global::Newtonsoft.Json.Formatting.None));
            writer.Write(",");
            writer.Write("\"Os\":");
            if (instance.Os == null)
                throw new ArgumentNullException("Os", "Required by proto specification.");
            writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.Os).ToString(global::Newtonsoft.Json.Formatting.None));
            writer.Write(",");
            writer.Write("\"Data\":");
            if (instance.Data != null)
            {
                writer.Write(instance.Data == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.Data) + "\""));
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class NetworkablesRemoved
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkablesRemoved Deserialize(Stream stream)
        {
            NetworkablesRemoved instance = new NetworkablesRemoved();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkablesRemoved DeserializeLengthDelimited(Stream stream)
        {
            NetworkablesRemoved instance = new NetworkablesRemoved();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkablesRemoved DeserializeLength(Stream stream, int length)
        {
            NetworkablesRemoved instance = new NetworkablesRemoved();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static NetworkablesRemoved Deserialize(byte[] buffer)
        {
            NetworkablesRemoved instance = new NetworkablesRemoved();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static NetworkablesRemoved Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            NetworkablesRemoved instance = new NetworkablesRemoved();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static NetworkablesRemoved Deserialize(string json)
        {
            NetworkablesRemoved instance = new NetworkablesRemoved();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.NetworkablesRemoved Deserialize(byte[] buffer, ProtoBuf.NetworkablesRemoved instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkablesRemoved Deserialize(Stream stream, ProtoBuf.NetworkablesRemoved instance)
        {
            if (instance.Networkables == null)
                instance.Networkables = new List<ProtoBuf.NetworkableInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Networkables.Add(ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkablesRemoved DeserializeLengthDelimited(Stream stream, ProtoBuf.NetworkablesRemoved instance)
        {
            if (instance.Networkables == null)
                instance.Networkables = new List<ProtoBuf.NetworkableInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Networkables.Add(ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkablesRemoved DeserializeLength(Stream stream, int length, ProtoBuf.NetworkablesRemoved instance)
        {
            if (instance.Networkables == null)
                instance.Networkables = new List<ProtoBuf.NetworkableInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Networkables.Add(ProtoBuf.NetworkableInfo.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.NetworkablesRemoved Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.NetworkablesRemoved instance)
        {
            if (instance.Networkables == null)
                instance.Networkables = new List<ProtoBuf.NetworkableInfo>();

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Networkables":
                        // repeated
                        foreach (var val in ((global::Newtonsoft.Json.Linq.JArray)property.Value))
                        {
                            instance.Networkables.Add(ProtoBuf.NetworkableInfo.Deserialize((global::Newtonsoft.Json.Linq.JObject)(val)));
                        }
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, NetworkablesRemoved instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Networkables != null)
            {
                foreach (var i1 in instance.Networkables)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    msField.SetLength(0);
                    ProtoBuf.NetworkableInfo.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(NetworkablesRemoved instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, NetworkablesRemoved instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, NetworkablesRemoved instance)
        {
            writer.Write("{");
            writer.Write("\"Networkables\":");

            if (instance.Networkables != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.Networkables)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ProtoBuf.NetworkableInfo.SerializeJson(writer, i1);
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class MessageTableSchema
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageTableSchema Deserialize(Stream stream)
        {
            MessageTableSchema instance = new MessageTableSchema();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageTableSchema DeserializeLengthDelimited(Stream stream)
        {
            MessageTableSchema instance = new MessageTableSchema();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageTableSchema DeserializeLength(Stream stream, int length)
        {
            MessageTableSchema instance = new MessageTableSchema();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MessageTableSchema Deserialize(byte[] buffer)
        {
            MessageTableSchema instance = new MessageTableSchema();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static MessageTableSchema Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            MessageTableSchema instance = new MessageTableSchema();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static MessageTableSchema Deserialize(string json)
        {
            MessageTableSchema instance = new MessageTableSchema();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.MessageTableSchema Deserialize(byte[] buffer, ProtoBuf.MessageTableSchema instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.MessageTableSchema Deserialize(Stream stream, ProtoBuf.MessageTableSchema instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<ProtoBuf.MessageTableEntry>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Entries.Add(ProtoBuf.MessageTableEntry.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.MessageTableSchema DeserializeLengthDelimited(Stream stream, ProtoBuf.MessageTableSchema instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<ProtoBuf.MessageTableEntry>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Entries.Add(ProtoBuf.MessageTableEntry.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.MessageTableSchema DeserializeLength(Stream stream, int length, ProtoBuf.MessageTableSchema instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<ProtoBuf.MessageTableEntry>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Entries.Add(ProtoBuf.MessageTableEntry.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.MessageTableSchema Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.MessageTableSchema instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<ProtoBuf.MessageTableEntry>();

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Entries":
                        // repeated
                        foreach (var val in ((global::Newtonsoft.Json.Linq.JArray)property.Value))
                        {
                            instance.Entries.Add(ProtoBuf.MessageTableEntry.Deserialize((global::Newtonsoft.Json.Linq.JObject)(val)));
                        }
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MessageTableSchema instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Entries != null)
            {
                foreach (var i1 in instance.Entries)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    msField.SetLength(0);
                    ProtoBuf.MessageTableEntry.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MessageTableSchema instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, MessageTableSchema instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, MessageTableSchema instance)
        {
            writer.Write("{");
            writer.Write("\"Entries\":");

            if (instance.Entries != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.Entries)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ProtoBuf.MessageTableEntry.SerializeJson(writer, i1);
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class MessageTableEntry
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageTableEntry Deserialize(Stream stream)
        {
            MessageTableEntry instance = new MessageTableEntry();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageTableEntry DeserializeLengthDelimited(Stream stream)
        {
            MessageTableEntry instance = new MessageTableEntry();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageTableEntry DeserializeLength(Stream stream, int length)
        {
            MessageTableEntry instance = new MessageTableEntry();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MessageTableEntry Deserialize(byte[] buffer)
        {
            MessageTableEntry instance = new MessageTableEntry();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static MessageTableEntry Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            MessageTableEntry instance = new MessageTableEntry();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static MessageTableEntry Deserialize(string json)
        {
            MessageTableEntry instance = new MessageTableEntry();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.MessageTableEntry Deserialize(byte[] buffer, ProtoBuf.MessageTableEntry instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.MessageTableEntry Deserialize(Stream stream, ProtoBuf.MessageTableEntry instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Ident = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.TypeName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.MessageTableEntry DeserializeLengthDelimited(Stream stream, ProtoBuf.MessageTableEntry instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Ident = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.TypeName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.MessageTableEntry DeserializeLength(Stream stream, int length, ProtoBuf.MessageTableEntry instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Ident = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.TypeName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.MessageTableEntry Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.MessageTableEntry instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Ident":
                        instance.Ident = (uint)(property.Value);
                        break;

                    case "TypeName":
                        instance.TypeName = (string)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MessageTableEntry instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)instance.Ident);
            if (instance.TypeName == null)
                throw new ArgumentNullException("TypeName", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.TypeName));
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MessageTableEntry instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, MessageTableEntry instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, MessageTableEntry instance)
        {
            writer.Write("{");
            writer.Write("\"Ident\":");
            writer.Write(instance.Ident.ToString());
            writer.Write(",");
            writer.Write("\"TypeName\":");
            if (instance.TypeName == null)
                throw new ArgumentNullException("TypeName", "Required by proto specification.");
            writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.TypeName).ToString(global::Newtonsoft.Json.Formatting.None));
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class NetworkableInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkableInfo Deserialize(Stream stream)
        {
            NetworkableInfo instance = new NetworkableInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkableInfo DeserializeLengthDelimited(Stream stream)
        {
            NetworkableInfo instance = new NetworkableInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkableInfo DeserializeLength(Stream stream, int length)
        {
            NetworkableInfo instance = new NetworkableInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static NetworkableInfo Deserialize(byte[] buffer)
        {
            NetworkableInfo instance = new NetworkableInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static NetworkableInfo Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            NetworkableInfo instance = new NetworkableInfo();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static NetworkableInfo Deserialize(string json)
        {
            NetworkableInfo instance = new NetworkableInfo();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.NetworkableInfo Deserialize(byte[] buffer, ProtoBuf.NetworkableInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkableInfo Deserialize(Stream stream, ProtoBuf.NetworkableInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Ident = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkableInfo DeserializeLengthDelimited(Stream stream, ProtoBuf.NetworkableInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Ident = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkableInfo DeserializeLength(Stream stream, int length, ProtoBuf.NetworkableInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Ident = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.NetworkableInfo Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.NetworkableInfo instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Ident":
                        instance.Ident = (uint)(property.Value);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, NetworkableInfo instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)instance.Ident);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(NetworkableInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, NetworkableInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, NetworkableInfo instance)
        {
            writer.Write("{");
            writer.Write("\"Ident\":");
            writer.Write(instance.Ident.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class Transform
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Transform Deserialize(Stream stream)
        {
            Transform instance = new Transform();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Transform DeserializeLengthDelimited(Stream stream)
        {
            Transform instance = new Transform();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Transform DeserializeLength(Stream stream, int length)
        {
            Transform instance = new Transform();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Transform Deserialize(byte[] buffer)
        {
            Transform instance = new Transform();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static Transform Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Transform instance = new Transform();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static Transform Deserialize(string json)
        {
            Transform instance = new Transform();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.Transform Deserialize(byte[] buffer, ProtoBuf.Transform instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Transform Deserialize(Stream stream, ProtoBuf.Transform instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        UnityEngine.QuaternionSerialized.DeserializeLengthDelimited(stream, ref instance.Rotation);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Scale);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Transform DeserializeLengthDelimited(Stream stream, ProtoBuf.Transform instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        UnityEngine.QuaternionSerialized.DeserializeLengthDelimited(stream, ref instance.Rotation);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Scale);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.Transform DeserializeLength(Stream stream, int length, ProtoBuf.Transform instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Position);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        UnityEngine.QuaternionSerialized.DeserializeLengthDelimited(stream, ref instance.Rotation);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        UnityEngine.Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.Scale);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.Transform Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.Transform instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Position":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Position);
                        break;

                    case "Rotation":
                        UnityEngine.QuaternionSerialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Rotation);
                        break;

                    case "Scale":
                        UnityEngine.Vector3Serialized.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), ref instance.Scale);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Transform instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.Position);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            msField.SetLength(0);
            UnityEngine.QuaternionSerialized.Serialize(msField, instance.Rotation);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            msField.SetLength(0);
            UnityEngine.Vector3Serialized.Serialize(msField, instance.Scale);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            stream.Write(msField.GetBuffer(), 0, (int)length3);

            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Transform instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Transform instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, Transform instance)
        {
            writer.Write("{");
            writer.Write("\"Position\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.Position);

            writer.Write(",");
            writer.Write("\"Rotation\":");
            UnityEngine.QuaternionSerialized.SerializeJson(writer, instance.Rotation);

            writer.Write(",");
            writer.Write("\"Scale\":");
            UnityEngine.Vector3Serialized.SerializeJson(writer, instance.Scale);

            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class NetworkableSave
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkableSave Deserialize(Stream stream)
        {
            NetworkableSave instance = new NetworkableSave();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkableSave DeserializeLengthDelimited(Stream stream)
        {
            NetworkableSave instance = new NetworkableSave();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NetworkableSave DeserializeLength(Stream stream, int length)
        {
            NetworkableSave instance = new NetworkableSave();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static NetworkableSave Deserialize(byte[] buffer)
        {
            NetworkableSave instance = new NetworkableSave();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static NetworkableSave Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            NetworkableSave instance = new NetworkableSave();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static NetworkableSave Deserialize(string json)
        {
            NetworkableSave instance = new NetworkableSave();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.NetworkableSave Deserialize(byte[] buffer, ProtoBuf.NetworkableSave instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkableSave Deserialize(Stream stream, ProtoBuf.NetworkableSave instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<byte[]>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Schema == null)
                            instance.Schema = ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream, instance.Schema);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Entries.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkableSave DeserializeLengthDelimited(Stream stream, ProtoBuf.NetworkableSave instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<byte[]>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Schema == null)
                            instance.Schema = ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream, instance.Schema);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Entries.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.NetworkableSave DeserializeLength(Stream stream, int length, ProtoBuf.NetworkableSave instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<byte[]>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Schema == null)
                            instance.Schema = ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream, instance.Schema);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Entries.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.NetworkableSave Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.NetworkableSave instance)
        {
            if (instance.Entries == null)
                instance.Entries = new List<byte[]>();

            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Schema":
                        if (instance.Schema == null)
                            instance.Schema = ProtoBuf.MessageTableSchema.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.MessageTableSchema.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.Schema);
                        break;

                    case "Entries":
                        // repeated
                        foreach (var val in ((global::Newtonsoft.Json.Linq.JArray)property.Value))
                        {
                            instance.Entries.Add(global::System.Convert.FromBase64String((string)(val)));
                        }
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, NetworkableSave instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Schema == null)
                throw new ArgumentNullException("Schema", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            msField.SetLength(0);
            ProtoBuf.MessageTableSchema.Serialize(msField, instance.Schema);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            if (instance.Entries != null)
            {
                foreach (var i2 in instance.Entries)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, i2);
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(NetworkableSave instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, NetworkableSave instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, NetworkableSave instance)
        {
            writer.Write("{");
            writer.Write("\"Schema\":");
            if (instance.Schema == null)
                throw new ArgumentNullException("Schema", "Required by proto specification.");
            ProtoBuf.MessageTableSchema.SerializeJson(writer, instance.Schema);

            writer.Write(",");
            writer.Write("\"Entries\":");

            if (instance.Entries != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i2 in instance.Entries)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write(i2 == null ? "null" : ("\"" + global::System.Convert.ToBase64String(i2) + "\""));
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [ProtoBuf.MessageIdent(MessageIdentifier)]
    [System.Serializable()]
    public partial class ConnectResponse
    {
        public const uint MessageIdentifier = 0x00000002;

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectResponse Deserialize(Stream stream)
        {
            ConnectResponse instance = new ConnectResponse();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectResponse DeserializeLengthDelimited(Stream stream)
        {
            ConnectResponse instance = new ConnectResponse();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ConnectResponse DeserializeLength(Stream stream, int length)
        {
            ConnectResponse instance = new ConnectResponse();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ConnectResponse Deserialize(byte[] buffer)
        {
            ConnectResponse instance = new ConnectResponse();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance when deserializing a JObject</summary>
        public static ConnectResponse Deserialize(global::Newtonsoft.Json.Linq.JObject obj)
        {
            ConnectResponse instance = new ConnectResponse();
            Deserialize(obj, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance and deserialize JSON from a string</summary>
        public static ConnectResponse Deserialize(string json)
        {
            ConnectResponse instance = new ConnectResponse();
            Deserialize(global::Newtonsoft.Json.Linq.JObject.Parse(json), instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this);
        }

        /// <summary>Load this value from a json object</summary>
        public void FromJson(global::Newtonsoft.Json.Linq.JObject obj)
        {
            Deserialize(obj, this);
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static ProtoBuf.ConnectResponse Deserialize(byte[] buffer, ProtoBuf.ConnectResponse instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectResponse Deserialize(Stream stream, ProtoBuf.ConnectResponse instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Flags = (ProtoBuf.ConnectResponseFlags)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.HostName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.UpdateRate = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Fixed64
                    case 49:
                        instance.ServerTime = br.ReadDouble();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.MessageTable == null)
                            instance.MessageTable = ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream, instance.MessageTable);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectResponse DeserializeLengthDelimited(Stream stream, ProtoBuf.ConnectResponse instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Flags = (ProtoBuf.ConnectResponseFlags)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.HostName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.UpdateRate = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Fixed64
                    case 49:
                        instance.ServerTime = br.ReadDouble();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.MessageTable == null)
                            instance.MessageTable = ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream, instance.MessageTable);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static ProtoBuf.ConnectResponse DeserializeLength(Stream stream, int length, ProtoBuf.ConnectResponse instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Flags = (ProtoBuf.ConnectResponseFlags)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.HostName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.UpdateRate = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Fixed64
                    case 49:
                        instance.ServerTime = br.ReadDouble();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.MessageTable == null)
                            instance.MessageTable = ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream);
                        else
                            ProtoBuf.MessageTableSchema.DeserializeLengthDelimited(stream, instance.MessageTable);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Deserializes an instance from a JSON object.</summary>
        public static ProtoBuf.ConnectResponse Deserialize(global::Newtonsoft.Json.Linq.JObject obj, ProtoBuf.ConnectResponse instance)
        {
            foreach (var property in obj.Properties())
            {
                switch (property.Name)
                {
                    case "Flags":
                        instance.Flags = (ProtoBuf.ConnectResponseFlags)(ulong)(property.Value);
                        break;

                    case "Message":
                        instance.Message = (string)(property.Value);
                        break;

                    case "HostName":
                        instance.HostName = (string)(property.Value);
                        break;

                    case "UpdateRate":
                        instance.UpdateRate = (int)(property.Value);
                        break;

                    case "ServerTime":
                        instance.ServerTime = (double)(property.Value);
                        break;

                    case "MessageTable":
                        if (instance.MessageTable == null)
                            instance.MessageTable = ProtoBuf.MessageTableSchema.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value));
                        else
                            ProtoBuf.MessageTableSchema.Deserialize((global::Newtonsoft.Json.Linq.JObject)(property.Value), instance.MessageTable);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ConnectResponse instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.Flags);
            if (instance.Message != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Message));
            }
            if (instance.HostName != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.HostName));
            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.UpdateRate);
            // Key for field: 6, Fixed64
            stream.WriteByte(49);
            bw.Write(instance.ServerTime);
            if (instance.MessageTable != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                msField.SetLength(0);
                ProtoBuf.MessageTableSchema.Serialize(msField, instance.MessageTable);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                stream.Write(msField.GetBuffer(), 0, (int)length4);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes(this);
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto(Stream stream)
        {
            Serialize(stream, this);
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ConnectResponse instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }

        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ConnectResponse instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, ConnectResponse instance)
        {
            writer.Write("{");
            writer.Write("\"Flags\":");
            writer.Write(instance.Flags.ToString());
            writer.Write(",");
            writer.Write("\"Message\":");
            if (instance.Message != null)
            {
                writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.Message).ToString(global::Newtonsoft.Json.Formatting.None));
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"HostName\":");
            if (instance.HostName != null)
            {
                writer.Write(new global::Newtonsoft.Json.Linq.JValue(instance.HostName).ToString(global::Newtonsoft.Json.Formatting.None));
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"UpdateRate\":");
            writer.Write(instance.UpdateRate.ToString());
            writer.Write(",");
            writer.Write("\"ServerTime\":");
            writer.Write(instance.ServerTime.ToString());
            writer.Write(",");
            writer.Write("\"MessageTable\":");
            if (instance.MessageTable != null)
            {
                ProtoBuf.MessageTableSchema.SerializeJson(writer, instance.MessageTable);
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }
}