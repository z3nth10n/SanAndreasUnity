é	
FD:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\ConsoleLog.cs
	namespace 	
SanAndreasAPI
 
{ 
public 

class 

ConsoleLog 
{ 
public 
string 
	logString 
;  
public 
string 

stackTrace  
;  !
public		 
LogType		 
logType		 
;		 
private 

ConsoleLog 
( 
) 
{ 	
} 	
public 

ConsoleLog 
( 
string  
	logString! *
,* +
string, 2

stackTrace3 =
,= >
LogType? F
logTypeG N
)N O
{ 	
this 
. 
	logString 
= 
	logString &
;& '
this 
. 

stackTrace 
= 

stackTrace (
;( )
this 
. 
logType 
= 
logType "
;" #
} 	
} 
} ˛
SD:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str (
)( )
]) *
[ 
assembly 	
:	 

AssemblyDescription 
( 
$str !
)! "
]" #
[		 
assembly		 	
:			 
!
AssemblyConfiguration		  
(		  !
$str		! #
)		# $
]		$ %
[

 
assembly

 	
:

	 

AssemblyCompany

 
(

 
$str

 
)

 
]

 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str *
)* +
]+ ,
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
["" 
assembly"" 	
:""	 

AssemblyVersion"" 
("" 
$str"" $
)""$ %
]""% &
[## 
assembly## 	
:##	 

AssemblyFileVersion## 
(## 
$str## (
)##( )
]##) *ëç
HD:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketClient.cs
	namespace 	
SanAndreasAPI
 
{ 
public 

class 
SocketClient 
: 
IDisposable  +
{ 
public 
SocketClientConsole "
myLogger# +
=, -
new. 1
SocketClientConsole2 E
(E F
)F G
;G H
public 
Socket 
ClientSocket "
;" #
public 
	IPAddress 
IP 
; 
public 
ushort 
Port 
; 
public!! 
ulong!! 
Id!! 
;!! 
[## 	
Obsolete##	 
(## 
$str## &
)##& '
]##' (
private$$ 

IPEndPoint$$ 
	_endpoint$$ $
;$$$ %
public(( 
Action(( 
<(( 
object(( 
,(( 
Socket(( $
>(($ %)
ReceivedServerMessageCallback((& C
;((C D
public)) 
Action)) 
OnConnectedCallback)) )
;))) *
private// 
SocketState// 
_state// "
;//" #
public11 
SocketState11 
myState11 "
{22 	
get33 
{44 
return55 
_state55 
;55 
}66 
}77 	
internal;; 

IPEndPoint;; 
IPEnd;; !
{<< 	
get== 
{>> 
if?? 
(?? 
IP?? 
!=?? 
null?? 
)?? 
{@@ 
ifAA 
(AA 
	_endpointAA !
==AA" $
nullAA% )
)AA) *
	_endpointBB !
=BB" #
newBB$ '

IPEndPointBB( 2
(BB2 3
IPBB3 5
,BB5 6
PortBB7 ;
)BB; <
;BB< =
returnCC 
	_endpointCC $
;CC$ %
}DD 
elseEE 
returnEE 
nullEE  
;EE  !
}FF 
}GG 	
publicKK 
ulongKK 
maxReqIdKK 
{LL 	
getMM 
{NN 
returnOO 
IdOO 
+OO 
ushortOO "
.OO" #
MaxValueOO# +
;OO+ ,
}PP 
}QQ 	
public[[ 
SocketClient[[ 
([[ 
bool[[  
doConnection[[! -
=[[. /
false[[0 5
)[[5 6
:[[7 8
this\\ 
(\\ 
	IPAddress\\ 
.\\ 
Loopback\\ #
,\\# $
SocketServer\\% 1
.\\1 2
DefPort\\2 9
,\\9 :

SocketType\\; E
.\\E F
Stream\\F L
,\\L M
ProtocolType\\N Z
.\\Z [
Tcp\\[ ^
,\\^ _
null\\` d
,\\d e
doConnection\\f r
)\\r s
{]] 	
}]]
 
publicdd 
SocketClientdd 
(dd 
Actiondd "
<dd" #
objectdd# )
,dd) *
Socketdd+ 1
>dd1 2
	everyFuncdd3 <
,dd< =
booldd> B
doConnectionddC O
=ddP Q
falseddR W
)ddW X
:ddY Z
thisee 
(ee 
	IPAddressee 
.ee 
Loopbackee #
,ee# $
SocketServeree% 1
.ee1 2
DefPortee2 9
,ee9 :

SocketTypeee; E
.eeE F
StreameeF L
,eeL M
ProtocolTypeeeN Z
.eeZ [
Tcpee[ ^
,ee^ _
	everyFuncee` i
,eei j
doConnectioneek w
)eew x
{ff 	
}ff
 
publicnn 
SocketClientnn 
(nn 
stringnn "
ipnn# %
,nn% &
ushortnn' -
portnn. 2
,nn2 3
boolnn4 8
doConnectionnn9 E
=nnF G
falsennH M
)nnM N
:nnO P
thisoo 
(oo 
ipoo 
,oo 
portoo 
,oo 
nulloo 
,oo  
doConnectionoo! -
)oo- .
{pp 	
}pp
 
publicrr 
SocketClientrr 
(rr 
	IPAddressrr %
iprr& (
,rr( )
ushortrr* 0
portrr1 5
,rr5 6
boolrr7 ;
doConnectionrr< H
=rrI J
falserrK P
)rrP Q
:rrR S
thisss 
(ss 
ipss 
,ss 
portss 
,ss 

SocketTypess %
.ss% &
Streamss& ,
,ss, -
ProtocolTypess. :
.ss: ;
Tcpss; >
,ss> ?
nullss@ D
,ssD E
doConnectionssF R
)ssR S
{tt 	
}tt
 
publicvv 
SocketClientvv 
(vv 
	IPAddressvv %
ipvv& (
,vv( )
ushortvv* 0
portvv1 5
,vv5 6
Actionvv7 =
<vv= >
objectvv> D
,vvD E
SocketvvF L
>vvL M
	everyFuncvvN W
,vvW X
boolvvY ]
doConnectionvv^ j
=vvk l
falsevvm r
)vvr s
:vvt u
thisww 
(ww 
ipww 
,ww 
portww 
,ww 

SocketTypeww %
.ww% &
Streamww& ,
,ww, -
ProtocolTypeww. :
.ww: ;
Tcpww; >
,ww> ?
	everyFuncww@ I
,wwI J
doConnectionwwK W
)wwW X
{xx 	
}xx
 
public
ÇÇ 
SocketClient
ÇÇ 
(
ÇÇ 
string
ÇÇ "
ip
ÇÇ# %
,
ÇÇ% &
ushort
ÇÇ' -
port
ÇÇ. 2
,
ÇÇ2 3
Action
ÇÇ4 :
<
ÇÇ: ;
object
ÇÇ; A
,
ÇÇA B
Socket
ÇÇC I
>
ÇÇI J
	everyFunc
ÇÇK T
,
ÇÇT U
bool
ÇÇV Z
doConnection
ÇÇ[ g
=
ÇÇh i
false
ÇÇj o
)
ÇÇo p
:
ÇÇq r
this
ÉÉ 
(
ÉÉ 
	IPAddress
ÉÉ 
.
ÉÉ 
Parse
ÉÉ  
(
ÉÉ  !
ip
ÉÉ! #
)
ÉÉ# $
,
ÉÉ$ %
port
ÉÉ& *
,
ÉÉ* +

SocketType
ÉÉ, 6
.
ÉÉ6 7
Stream
ÉÉ7 =
,
ÉÉ= >
ProtocolType
ÉÉ? K
.
ÉÉK L
Tcp
ÉÉL O
,
ÉÉO P
	everyFunc
ÉÉQ Z
,
ÉÉZ [
doConnection
ÉÉ\ h
)
ÉÉh i
{
ÑÑ 	
}
ÑÑ
 
public
êê 
SocketClient
êê 
(
êê 
	IPAddress
êê %
ipAddr
êê& ,
,
êê, -
ushort
êê. 4
port
êê5 9
,
êê9 :

SocketType
êê; E
sType
êêF K
,
êêK L
ProtocolType
êêM Y
pType
êêZ _
,
êê_ `
Action
êêa g
<
êêg h
object
êêh n
,
êên o
Socket
êêp v
>
êêv w
	everyFuncêêx Å
,êêÅ Ç
boolêêÉ á
doConnectionêêà î
=êêï ñ
falseêêó ú
)êêú ù
{
ëë 	+
ReceivedServerMessageCallback
îî )
=
îî* +
	everyFunc
îî, 5
;
îî5 6
IP
öö 
=
öö 
ipAddr
öö 
;
öö 
Port
õõ 
=
õõ 
port
õõ 
;
õõ 
ClientSocket
ùù 
=
ùù 
new
ùù 
Socket
ùù %
(
ùù% &
ipAddr
ùù& ,
.
ùù, -
AddressFamily
ùù- :
,
ùù: ;
sType
ùù< A
,
ùùA B
pType
ùùC H
)
ùùH I
{
ûû 
NoDelay
üü 
=
üü 
false
üü 
}
†† 
;
†† 
if
¢¢ 
(
¢¢ 
doConnection
¢¢ 
)
¢¢ 
DoConnection
££ 
(
££ 
)
££ 
;
££ 
}
§§ 	
public
œœ 
void
œœ 
DoConnection
œœ  
(
œœ  !
)
œœ! "
{
–– 	
try
““ 
{
”” 
ClientSocket
‘‘ 
.
‘‘ 
BeginConnect
‘‘ )
(
‘‘) *
IPEnd
‘‘* /
,
‘‘/ 0
new
‘‘1 4
AsyncCallback
‘‘5 B
(
‘‘B C&
ConnectToServerCompleted
‘‘C [
)
‘‘[ \
,
‘‘\ ]
new
‘‘^ a
SocketGlobals
‘‘b o
.
‘‘o p
AsyncSendState
‘‘p ~
(
‘‘~ 
ClientSocket‘‘ ã
)‘‘ã å
)‘‘å ç
;‘‘ç é
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷ 
ex
÷÷ 
)
÷÷  
{
◊◊ 
myLogger
ÿÿ 
.
ÿÿ 
Log
ÿÿ 
(
ÿÿ 
$str
ÿÿ 6
+
ÿÿ7 8
ex
ÿÿ9 ;
.
ÿÿ; <
Message
ÿÿ< C
)
ÿÿC D
;
ÿÿD E
}
ŸŸ 
}
⁄⁄ 	
public
‹‹ 
void
‹‹ "
DisconnectFromServer
‹‹ (
(
‹‹( )
)
‹‹) *
{
›› 	
ClientSocket
ﬁﬁ 
.
ﬁﬁ 

Disconnect
ﬁﬁ #
(
ﬁﬁ# $
false
ﬁﬁ$ )
)
ﬁﬁ) *
;
ﬁﬁ* +
}
ﬂﬂ 	
public
ÊÊ 
void
ÊÊ &
ConnectToServerCompleted
ÊÊ ,
(
ÊÊ, -
IAsyncResult
ÊÊ- 9
ar
ÊÊ: <
)
ÊÊ< =
{
ÁÁ 	
SocketGlobals
ÈÈ 
.
ÈÈ 
AsyncSendState
ÈÈ (
mState
ÈÈ) /
=
ÈÈ0 1
(
ÈÈ2 3
SocketGlobals
ÈÈ3 @
.
ÈÈ@ A
AsyncSendState
ÈÈA O
)
ÈÈO P
ar
ÈÈP R
.
ÈÈR S

AsyncState
ÈÈS ]
;
ÈÈ] ^
try
ÏÏ 
{
ÌÌ 
mState
ÔÔ 
.
ÔÔ 
Socket
ÔÔ 
.
ÔÔ 

EndConnect
ÔÔ (
(
ÔÔ( )
ar
ÔÔ) +
)
ÔÔ+ ,
;
ÔÔ, -
Send
ÙÙ 
(
ÙÙ 
SocketManager
ÙÙ "
.
ÙÙ" #
ManagedConn
ÙÙ# .
(
ÙÙ. /
)
ÙÙ/ 0
)
ÙÙ0 1
;
ÙÙ1 2
SocketGlobals
˜˜ 
.
˜˜ 
AsyncReceiveState
˜˜ /
mReceiveState
˜˜0 =
=
˜˜> ?
new
˜˜@ C
SocketGlobals
˜˜D Q
.
˜˜Q R
AsyncReceiveState
˜˜R c
(
˜˜c d
)
˜˜d e
;
˜˜e f
mReceiveState
¯¯ 
.
¯¯ 
Socket
¯¯ $
=
¯¯% &
mState
¯¯' -
.
¯¯- .
Socket
¯¯. 4
;
¯¯4 5
Console
˙˙ 
.
˙˙ 
	WriteLine
˙˙ !
(
˙˙! "
$str
˙˙" m
,
˙˙m n
ar
˙˙o q
.
˙˙q r%
CompletedSynchronously˙˙r à
,˙˙à â
ar˙˙ä å
.˙˙å ç
IsCompleted˙˙ç ò
)˙˙ò ô
;˙˙ô ö
mReceiveState
¸¸ 
.
¸¸ 
Socket
¸¸ $
.
¸¸$ %
BeginReceive
¸¸% 1
(
¸¸1 2
mReceiveState
¸¸2 ?
.
¸¸? @
Buffer
¸¸@ F
,
¸¸F G
$num
¸¸H I
,
¸¸I J
SocketGlobals
¸¸K X
.
¸¸X Y
gBufferSize
¸¸Y d
,
¸¸d e
SocketFlags
¸¸f q
.
¸¸q r
None
¸¸r v
,
¸¸v w
new
¸¸x {
AsyncCallback¸¸| â
(¸¸â ä%
ServerMessageReceived¸¸ä ü
)¸¸ü †
,¸¸† °
mReceiveState¸¸¢ Ø
)¸¸Ø ∞
;¸¸∞ ±
}
ˇˇ 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ 
ex
ÄÄ 
)
ÄÄ  
{
ÅÅ 
myLogger
ÉÉ 
.
ÉÉ 
Log
ÉÉ 
(
ÉÉ 
$str
ÉÉ .
+
ÉÉ/ 0
ex
ÉÉ1 3
.
ÉÉ3 4
Message
ÉÉ4 ;
)
ÉÉ; <
;
ÉÉ< =
}
ÑÑ 
}
ÖÖ 	
public
áá 
void
áá #
ServerMessageReceived
áá )
(
áá) *
IAsyncResult
áá* 6
ar
áá7 9
)
áá9 :
{
àà 	
SocketGlobals
ää 
.
ää 
AsyncReceiveState
ää +
mState
ää, 2
=
ää3 4
(
ää5 6
SocketGlobals
ää6 C
.
ääC D
AsyncReceiveState
ääD U
)
ääU V
ar
ääV X
.
ääX Y

AsyncState
ääY c
;
ääc d
int
çç 
numBytesReceived
çç  
=
çç! "
$num
çç# $
;
çç$ %
numBytesReceived
éé 
=
éé 
mState
éé %
.
éé% &
Socket
éé& ,
.
éé, -

EndReceive
éé- 7
(
éé7 8
ar
éé8 :
)
éé: ;
;
éé; <
if
ëë 
(
ëë 
mState
ëë 
.
ëë 
ReceiveSize
ëë "
==
ëë# %
$num
ëë& '
)
ëë' (
{
íí 
mState
îî 
.
îî 
ReceiveSize
îî "
=
îî# $
BitConverter
îî% 1
.
îî1 2
ToInt32
îî2 9
(
îî9 :
mState
îî: @
.
îî@ A
Buffer
îîA G
,
îîG H
$num
îîI J
)
îîJ K
;
îîK L
mState
ññ 
.
ññ  
PacketBufferStream
ññ )
.
ññ) *
Write
ññ* /
(
ññ/ 0
mState
ññ0 6
.
ññ6 7
Buffer
ññ7 =
,
ññ= >
$num
ññ? @
,
ññ@ A
numBytesReceived
ññB R
-
ññS T
$num
ññU V
)
ññV W
;
ññW X
}
óó 
else
òò 
{
ôô 
mState
õõ 
.
õõ  
PacketBufferStream
õõ )
.
õõ) *
Write
õõ* /
(
õõ/ 0
mState
õõ0 6
.
õõ6 7
Buffer
õõ7 =
,
õõ= >
$num
õõ? @
,
õõ@ A
numBytesReceived
õõB R
)
õõR S
;
õõS T
}
úú 
mState
üü 
.
üü  
TotalBytesReceived
üü %
+=
üü& (
numBytesReceived
üü) 9
;
üü9 :
if
¢¢ 
(
¢¢ 
mState
¢¢ 
.
¢¢  
TotalBytesReceived
¢¢ )
<
¢¢* +
mState
¢¢, 2
.
¢¢2 3
ReceiveSize
¢¢3 >
)
¢¢> ?
{
££ 
mState
¶¶ 
.
¶¶ 
Socket
¶¶ 
.
¶¶ 
BeginReceive
¶¶ *
(
¶¶* +
mState
¶¶+ 1
.
¶¶1 2
Buffer
¶¶2 8
,
¶¶8 9
$num
¶¶: ;
,
¶¶; <
SocketGlobals
¶¶= J
.
¶¶J K
gBufferSize
¶¶K V
,
¶¶V W
SocketFlags
¶¶X c
.
¶¶c d
None
¶¶d h
,
¶¶h i
new
¶¶j m
AsyncCallback
¶¶n {
(
¶¶{ |$
ServerMessageReceived¶¶| ë
)¶¶ë í
,¶¶í ì
mState¶¶î ö
)¶¶ö õ
;¶¶õ ú
}
ßß 
else
®® 
{
©© 
System
¨¨ 
.
¨¨ 
Runtime
¨¨ 
.
¨¨ 
Serialization
¨¨ ,
.
¨¨, -

Formatters
¨¨- 7
.
¨¨7 8
Binary
¨¨8 >
.
¨¨> ?
BinaryFormatter
¨¨? N
mSerializer
¨¨O Z
=
¨¨[ \
new
¨¨] `
System
¨¨a g
.
¨¨g h
Runtime
¨¨h o
.
¨¨o p
Serialization
¨¨p }
.
¨¨} ~

Formatters¨¨~ à
.¨¨à â
Binary¨¨â è
.¨¨è ê
BinaryFormatter¨¨ê ü
(¨¨ü †
)¨¨† °
;¨¨° ¢
mState
ÆÆ 
.
ÆÆ  
PacketBufferStream
ÆÆ )
.
ÆÆ) *
Position
ÆÆ* 2
=
ÆÆ3 4
$num
ÆÆ5 6
;
ÆÆ6 7
mState
∞∞ 
.
∞∞ 
Packet
∞∞ 
=
∞∞ 
mSerializer
∞∞  +
.
∞∞+ ,
Deserialize
∞∞, 7
(
∞∞7 8
mState
∞∞8 >
.
∞∞> ? 
PacketBufferStream
∞∞? Q
)
∞∞Q R
;
∞∞R S(
ParseReceivedServerMessage
≤≤ *
(
≤≤* +
mState
≤≤+ 1
.
≤≤1 2
Packet
≤≤2 8
,
≤≤8 9
mState
≤≤: @
.
≤≤@ A
Socket
≤≤A G
)
≤≤G H
;
≤≤H I
SocketGlobals
¥¥ 
.
¥¥ 
AsyncReceiveState
¥¥ /

mNextState
¥¥0 :
=
¥¥; <
new
¥¥= @
SocketGlobals
¥¥A N
.
¥¥N O
AsyncReceiveState
¥¥O `
(
¥¥` a
)
¥¥a b
;
¥¥b c

mNextState
µµ 
.
µµ 
Socket
µµ !
=
µµ" #
mState
µµ$ *
.
µµ* +
Socket
µµ+ 1
;
µµ1 2
mState
∏∏ 
.
∏∏  
PacketBufferStream
∏∏ )
.
∏∏) *
Close
∏∏* /
(
∏∏/ 0
)
∏∏0 1
;
∏∏1 2
mState
ππ 
.
ππ  
PacketBufferStream
ππ )
.
ππ) *
Dispose
ππ* 1
(
ππ1 2
)
ππ2 3
;
ππ3 4
mState
∫∫ 
.
∫∫  
PacketBufferStream
∫∫ )
=
∫∫* +
null
∫∫, 0
;
∫∫0 1
Array
ªª 
.
ªª 
Clear
ªª 
(
ªª 
mState
ªª "
.
ªª" #
Buffer
ªª# )
,
ªª) *
$num
ªª+ ,
,
ªª, -
mState
ªª. 4
.
ªª4 5
Buffer
ªª5 ;
.
ªª; <
Length
ªª< B
)
ªªB C
;
ªªC D

mNextState
øø 
.
øø 
Socket
øø !
.
øø! "
BeginReceive
øø" .
(
øø. /

mNextState
øø/ 9
.
øø9 :
Buffer
øø: @
,
øø@ A
$num
øøB C
,
øøC D
SocketGlobals
øøE R
.
øøR S
gBufferSize
øøS ^
,
øø^ _
SocketFlags
øø` k
.
øøk l
None
øøl p
,
øøp q
new
øør u
AsyncCallbackøøv É
(øøÉ Ñ%
ServerMessageReceivedøøÑ ô
)øøô ö
,øøö õ

mNextStateøøú ¶
)øø¶ ß
;øøß ®
mState
¬¬ 
=
¬¬ 
null
¬¬ 
;
¬¬ 
}
√√ 
}
ƒƒ 	
public
∆∆ 
void
∆∆ (
ParseReceivedServerMessage
∆∆ .
(
∆∆. /
object
∆∆/ 5
obj
∆∆6 9
,
∆∆9 :
Socket
∆∆; A
	argClient
∆∆B K
)
∆∆K L
{
«« 	
Console
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» <
,
»»< =
obj
»»> A
.
»»A B
GetType
»»B I
(
»»I J
)
»»J K
.
»»K L
Name
»»L P
)
»»P Q
;
»»Q R
if
   
(
   
obj
   
is
   
string
   
)
   
myLogger
ÀÀ 
.
ÀÀ 
Log
ÀÀ 
(
ÀÀ 
(
ÀÀ 
string
ÀÀ $
)
ÀÀ$ %
obj
ÀÀ% (
)
ÀÀ( )
;
ÀÀ) *
else
ÃÃ 
if
ÃÃ 
(
ÃÃ 
obj
ÃÃ 
is
ÃÃ 
SocketMessage
ÃÃ )
)
ÃÃ) *
HandleAction
ÕÕ 
(
ÕÕ 
(
ÕÕ 
SocketMessage
ÕÕ +
)
ÕÕ+ ,
obj
ÕÕ, /
,
ÕÕ/ 0
	argClient
ÕÕ1 :
)
ÕÕ: ;
;
ÕÕ; <
}
ŒŒ 	
public
–– 
void
–– 
Send
–– 
(
–– 
object
–– 
obj
––  #
)
––# $
{
—— 	
System
”” 
.
”” 
Runtime
”” 
.
”” 
Serialization
”” (
.
””( )

Formatters
””) 3
.
””3 4
Binary
””4 :
.
””: ;
BinaryFormatter
””; J
mSerializer
””K V
=
””W X
new
””Y \
System
””] c
.
””c d
Runtime
””d k
.
””k l
Serialization
””l y
.
””y z

Formatters””z Ñ
.””Ñ Ö
Binary””Ö ã
.””ã å
BinaryFormatter””å õ
(””õ ú
)””ú ù
;””ù û
using
‘‘ 
(
‘‘ 
System
‘‘ 
.
‘‘ 
IO
‘‘ 
.
‘‘ 
MemoryStream
‘‘ )
mSerializerStream
‘‘* ;
=
‘‘< =
new
‘‘> A
System
‘‘B H
.
‘‘H I
IO
‘‘I K
.
‘‘K L
MemoryStream
‘‘L X
(
‘‘X Y
)
‘‘Y Z
)
‘‘Z [
{
’’ 
mSerializer
÷÷ 
.
÷÷ 
	Serialize
÷÷ %
(
÷÷% &
mSerializerStream
÷÷& 7
,
÷÷7 8
obj
÷÷9 <
)
÷÷< =
;
÷÷= >
byte
ŸŸ 
[
ŸŸ 
]
ŸŸ 
mPacketBytes
ŸŸ #
=
ŸŸ$ %
mSerializerStream
ŸŸ& 7
.
ŸŸ7 8
	GetBuffer
ŸŸ8 A
(
ŸŸA B
)
ŸŸB C
;
ŸŸC D
byte
‹‹ 
[
‹‹ 
]
‹‹ 

mSizeBytes
‹‹ !
=
‹‹" #
BitConverter
‹‹$ 0
.
‹‹0 1
GetBytes
‹‹1 9
(
‹‹9 :
mPacketBytes
‹‹: F
.
‹‹F G
Length
‹‹G M
+
‹‹N O
$num
‹‹P Q
)
‹‹Q R
;
‹‹R S
SocketGlobals
ﬂﬂ 
.
ﬂﬂ 
AsyncSendState
ﬂﬂ ,
mState
ﬂﬂ- 3
=
ﬂﬂ4 5
new
ﬂﬂ6 9
SocketGlobals
ﬂﬂ: G
.
ﬂﬂG H
AsyncSendState
ﬂﬂH V
(
ﬂﬂV W
ClientSocket
ﬂﬂW c
)
ﬂﬂc d
;
ﬂﬂd e
Array
„„ 
.
„„ 
Resize
„„ 
(
„„ 
ref
„„  
mState
„„! '
.
„„' (
BytesToSend
„„( 3
,
„„3 4
mPacketBytes
„„5 A
.
„„A B
Length
„„B H
+
„„I J

mSizeBytes
„„K U
.
„„U V
Length
„„V \
)
„„\ ]
;
„„] ^
Buffer
ÊÊ 
.
ÊÊ 
	BlockCopy
ÊÊ  
(
ÊÊ  !

mSizeBytes
ÊÊ! +
,
ÊÊ+ ,
$num
ÊÊ- .
,
ÊÊ. /
mState
ÊÊ0 6
.
ÊÊ6 7
BytesToSend
ÊÊ7 B
,
ÊÊB C
$num
ÊÊD E
,
ÊÊE F

mSizeBytes
ÊÊG Q
.
ÊÊQ R
Length
ÊÊR X
)
ÊÊX Y
;
ÊÊY Z
Buffer
ÁÁ 
.
ÁÁ 
	BlockCopy
ÁÁ  
(
ÁÁ  !
mPacketBytes
ÁÁ! -
,
ÁÁ- .
$num
ÁÁ/ 0
,
ÁÁ0 1
mState
ÁÁ2 8
.
ÁÁ8 9
BytesToSend
ÁÁ9 D
,
ÁÁD E

mSizeBytes
ÁÁF P
.
ÁÁP Q
Length
ÁÁQ W
,
ÁÁW X
mPacketBytes
ÁÁY e
.
ÁÁe f
Length
ÁÁf l
)
ÁÁl m
;
ÁÁm n
Array
ÈÈ 
.
ÈÈ 
Clear
ÈÈ 
(
ÈÈ 

mSizeBytes
ÈÈ &
,
ÈÈ& '
$num
ÈÈ( )
,
ÈÈ) *

mSizeBytes
ÈÈ+ 5
.
ÈÈ5 6
Length
ÈÈ6 <
)
ÈÈ< =
;
ÈÈ= >
Array
ÍÍ 
.
ÍÍ 
Clear
ÍÍ 
(
ÍÍ 
mPacketBytes
ÍÍ (
,
ÍÍ( )
$num
ÍÍ* +
,
ÍÍ+ ,
mPacketBytes
ÍÍ- 9
.
ÍÍ9 :
Length
ÍÍ: @
)
ÍÍ@ A
;
ÍÍA B
Console
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ !
(
ÏÏ! "
$str
ÏÏ" N
,
ÏÏN O
mState
ÏÏP V
.
ÏÏV W
BytesToSend
ÏÏW b
.
ÏÏb c
Length
ÏÏc i
)
ÏÏi j
;
ÏÏj k
ClientSocket
ÓÓ 
.
ÓÓ 
	BeginSend
ÓÓ &
(
ÓÓ& '
mState
ÓÓ' -
.
ÓÓ- .
BytesToSend
ÓÓ. 9
,
ÓÓ9 :
mState
ÓÓ; A
.
ÓÓA B

NextOffset
ÓÓB L
(
ÓÓL M
)
ÓÓM N
,
ÓÓN O
mState
ÓÓP V
.
ÓÓV W

NextLength
ÓÓW a
(
ÓÓa b
)
ÓÓb c
,
ÓÓc d
SocketFlags
ÓÓe p
.
ÓÓp q
None
ÓÓq u
,
ÓÓu v
new
ÓÓw z
AsyncCallbackÓÓ{ à
(ÓÓà â
MessagePartSentÓÓâ ò
)ÓÓò ô
,ÓÓô ö
mStateÓÓõ °
)ÓÓ° ¢
;ÓÓ¢ £
}
ÔÔ 
}
 	
public
ÚÚ 
void
ÚÚ !
SendMessageToServer
ÚÚ '
(
ÚÚ' (
string
ÚÚ( .
argCommandString
ÚÚ/ ?
)
ÚÚ? @
{
ÛÛ 	
Send
ÙÙ 
(
ÙÙ 
argCommandString
ÙÙ !
)
ÙÙ! "
;
ÙÙ" #
}
ıı 	
public
˜˜ 
void
˜˜ 
MessagePartSent
˜˜ #
(
˜˜# $
IAsyncResult
˜˜$ 0
ar
˜˜1 3
)
˜˜3 4
{
¯¯ 	
SocketGlobals
˙˙ 
.
˙˙ 
AsyncSendState
˙˙ (
mState
˙˙) /
=
˙˙0 1
(
˙˙2 3
SocketGlobals
˙˙3 @
.
˙˙@ A
AsyncSendState
˙˙A O
)
˙˙O P
ar
˙˙P R
.
˙˙R S

AsyncState
˙˙S ]
;
˙˙] ^
try
˚˚ 
{
¸¸ 
int
˝˝ 
numBytesSent
˝˝  
=
˝˝! "
$num
˝˝# $
;
˝˝$ %
numBytesSent
ˇˇ 
=
ˇˇ 
mState
ˇˇ %
.
ˇˇ% &
Socket
ˇˇ& ,
.
ˇˇ, -
EndSend
ˇˇ- 4
(
ˇˇ4 5
ar
ˇˇ5 7
)
ˇˇ7 8
;
ˇˇ8 9
mState
ÅÅ 
.
ÅÅ 
Progress
ÅÅ 
+=
ÅÅ  "
numBytesSent
ÅÅ# /
;
ÅÅ/ 0
if
ÉÉ 
(
ÉÉ 
mState
ÉÉ 
.
ÉÉ 

NextLength
ÉÉ %
(
ÉÉ% &
)
ÉÉ& '
>
ÉÉ( )
$num
ÉÉ* +
)
ÉÉ+ ,
{
ÑÑ 
mState
ÜÜ 
.
ÜÜ 
Socket
ÜÜ !
.
ÜÜ! "
	BeginSend
ÜÜ" +
(
ÜÜ+ ,
mState
ÜÜ, 2
.
ÜÜ2 3
BytesToSend
ÜÜ3 >
,
ÜÜ> ?
mState
ÜÜ@ F
.
ÜÜF G

NextOffset
ÜÜG Q
(
ÜÜQ R
)
ÜÜR S
,
ÜÜS T
mState
ÜÜU [
.
ÜÜ[ \

NextLength
ÜÜ\ f
(
ÜÜf g
)
ÜÜg h
,
ÜÜh i
SocketFlags
ÜÜj u
.
ÜÜu v
None
ÜÜv z
,
ÜÜz {
new
ÜÜ| 
AsyncCallbackÜÜÄ ç
(ÜÜç é
MessagePartSentÜÜé ù
)ÜÜù û
,ÜÜû ü
mStateÜÜ† ¶
)ÜÜ¶ ß
;ÜÜß ®
}
áá 
else
àà 
{
ââ 
Console
ää 
.
ää 
	WriteLine
ää %
(
ää% &
$str
ää& o
,
ääo p
ar
ääq s
.
ääs t%
CompletedSynchronouslyäät ä
,äää ã
arääå é
.ääé è
IsCompletedääè ö
)ääö õ
;ääõ ú
Array
éé 
.
éé 
Clear
éé 
(
éé  
mState
éé  &
.
éé& '
BytesToSend
éé' 2
,
éé2 3
$num
éé4 5
,
éé5 6
mState
éé7 =
.
éé= >
BytesToSend
éé> I
.
ééI J
Length
ééJ P
)
ééP Q
;
ééQ R
mState
ëë 
=
ëë 
null
ëë !
;
ëë! "
}
íí 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
myLogger
ôô 
.
ôô 
Log
ôô 
(
ôô 
$str
ôô /
+
ôô0 1
ex
ôô2 4
.
ôô4 5
Message
ôô5 <
)
ôô< =
;
ôô= >
}
öö 
}
õõ 	
private
°° 
void
°° 
HandleAction
°° !
(
°°! "
SocketMessage
°°" /
sm
°°0 2
,
°°2 3
Socket
°°4 :
	argClient
°°; D
)
°°D E
{
¢¢ 	
if
§§ 
(
§§ 
sm
§§ 
.
§§ 
msg
§§ 
is
§§ 
SocketCommand
§§ '
)
§§' (
{
•• 
SocketCommand
¶¶ 
cmd
¶¶ !
=
¶¶" #
sm
¶¶$ &
.
¶¶& '
TryGetObject
¶¶' 3
<
¶¶3 4
SocketCommand
¶¶4 A
>
¶¶A B
(
¶¶B C
)
¶¶C D
;
¶¶D E
if
ßß 
(
ßß 
cmd
ßß 
!=
ßß 
null
ßß 
)
ßß  
{
®® 
switch
©© 
(
©© 
cmd
©© 
.
©©  
Command
©©  '
)
©©' (
{
™™ 
case
´´ 
SocketCommands
´´ +
.
´´+ ,
CreateConnId
´´, 8
:
´´8 9
myLogger
¨¨ $
.
¨¨$ %
Log
¨¨% (
(
¨¨( )
$str
¨¨) V
,
¨¨V W
sm
¨¨X Z
.
¨¨Z [
id
¨¨[ ]
)
¨¨] ^
;
¨¨^ _
Id
≠≠ 
=
≠≠  
sm
≠≠! #
.
≠≠# $
id
≠≠$ &
;
≠≠& '
Send
ØØ  
(
ØØ  !
SocketManager
ØØ! .
.
ØØ. /
ConfirmConnId
ØØ/ <
(
ØØ< =
Id
ØØ= ?
)
ØØ? @
)
ØØ@ A
;
ØØA B!
OnConnectedCallback
∞∞ /
?
∞∞/ 0
.
∞∞0 1
Invoke
∞∞1 7
(
∞∞7 8
)
∞∞8 9
;
∞∞9 :
break
±± !
;
±±! "
case
≥≥ 
SocketCommands
≥≥ +
.
≥≥+ ,
CloseInstance
≥≥, 9
:
≥≥9 :
myLogger
¥¥ $
.
¥¥$ %
Log
¥¥% (
(
¥¥( )
$str
¥¥) J
)
¥¥J K
;
¥¥K L
Stop
µµ  
(
µµ  !
false
µµ! &
)
µµ& '
;
µµ' (
break
∂∂ !
;
∂∂! "
default
∏∏ 
:
∏∏  
myLogger
ππ $
.
ππ$ %
Log
ππ% (
(
ππ( )
$str
ππ) W
,
ππW X
cmd
ππY \
)
ππ\ ]
;
ππ] ^
break
∫∫ !
;
∫∫! "
}
ªª 
}
ºº 
else
ΩΩ 
{
ææ 
myLogger
øø 
.
øø 
Log
øø  
(
øø  !
$str
øø! C
)
øøC D
;
øøD E
}
¿¿ 
}
¡¡ 
else
¬¬ +
ReceivedServerMessageCallback
√√ -
?
√√- .
.
√√. /
Invoke
√√/ 5
(
√√5 6
sm
√√6 8
.
√√8 9
msg
√√9 <
,
√√< =
	argClient
√√> G
)
√√G H
;
√√H I
}
ƒƒ 	
private
»» 
void
»» 
CloseConnection
»» $
(
»»$ %
SocketShutdown
»»% 3

soShutdown
»»4 >
)
»»> ?
{
…… 	
if
   
(
   

soShutdown
   
==
   
SocketShutdown
   ,
.
  , -
Receive
  - 4
)
  4 5
{
ÀÀ 
myLogger
ÃÃ 
.
ÃÃ 
Log
ÃÃ 
(
ÃÃ 
$str
ÃÃ 
)ÃÃ Ä
;ÃÃÄ Å
return
ÕÕ 
;
ÕÕ 
}
ŒŒ 
if
œœ 
(
œœ 
ClientSocket
œœ 
.
œœ 
	Connected
œœ &
)
œœ& '
{
–– 
ClientSocket
—— 
.
—— 

Disconnect
—— '
(
——' (
false
——( -
)
——- .
;
——. /
if
““ 
(
““ 
ClientSocket
““  
.
““  !
	Connected
““! *
)
““* +
ClientSocket
””  
.
””  !
Shutdown
””! )
(
””) *

soShutdown
””* 4
)
””4 5
;
””5 6
}
‘‘ 
}
’’ 	
private
◊◊ 
bool
◊◊ 
disposed
◊◊ 
;
◊◊ 
public
⁄⁄ 
void
⁄⁄ 
Dispose
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
{
€€ 	
Dispose
‹‹ 
(
‹‹ 
true
‹‹ 
)
‹‹ 
;
‹‹ 
GC
›› 
.
›› 
SuppressFinalize
›› 
(
››  
this
››  $
)
››$ %
;
››% &
}
ﬁﬁ 	
	protected
·· 
virtual
·· 
void
·· 
Dispose
·· &
(
··& '
bool
··' +
	disposing
··, 5
)
··5 6
{
‚‚ 	
if
„„ 
(
„„ 
disposed
„„ 
)
„„ 
return
‰‰ 
;
‰‰ 
if
ÊÊ 
(
ÊÊ 
	disposing
ÊÊ 
)
ÊÊ 
{
ÁÁ 
Send
ËË 
(
ËË 
SocketManager
ËË "
.
ËË" #
ClientClosed
ËË# /
(
ËË/ 0
Id
ËË0 2
)
ËË2 3
)
ËË3 4
;
ËË4 5
}
ÎÎ 
disposed
ÔÔ 
=
ÔÔ 
true
ÔÔ 
;
ÔÔ 
}
 	
public
ıı 
void
ıı 
Stop
ıı 
(
ıı 
bool
ıı 
dis
ıı !
)
ıı! "
{
ˆˆ 	
if
˜˜ 
(
˜˜ 
_state
˜˜ 
==
˜˜ 
SocketState
˜˜ %
.
˜˜% &
ClientStarted
˜˜& 3
)
˜˜3 4
{
¯¯ 
try
˘˘ 
{
˙˙ 
myLogger
˚˚ 
.
˚˚ 
Log
˚˚  
(
˚˚  !
$str
˚˚! 8
,
˚˚8 9
Id
˚˚: <
)
˚˚< =
;
˚˚= >
_state
˝˝ 
=
˝˝ 
SocketState
˝˝ (
.
˝˝( )
ClientStopped
˝˝) 6
;
˝˝6 7
CloseConnection
˛˛ #
(
˛˛# $
SocketShutdown
˛˛$ 2
.
˛˛2 3
Both
˛˛3 7
)
˛˛7 8
;
˛˛8 9
if
ÄÄ 
(
ÄÄ 
dis
ÄÄ 
)
ÄÄ 
{
ÅÅ 
ClientSocket
ÇÇ $
.
ÇÇ$ %
Close
ÇÇ% *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
}
ÑÑ 
else
ÖÖ 
Send
ÖÖ 
(
ÖÖ 
SocketManager
ÖÖ +
.
ÖÖ+ ,
ClientClosed
ÖÖ, 8
(
ÖÖ8 9
Id
ÖÖ9 ;
)
ÖÖ; <
)
ÖÖ< =
;
ÖÖ= >
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá  
ex
áá! #
)
áá# $
{
àà 
myLogger
ââ 
.
ââ 
Log
ââ  
(
ââ  !
$str
ââ! R
+
ââS T
ex
ââU W
)
ââW X
;
ââX Y
}
ää 
}
ãã 
else
åå 
myLogger
çç 
.
çç 
Log
çç 
(
çç 
$str
çç W
)
ççW X
;
ççX Y
}
éé 	
}
ìì 
}îî Å	
ID:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketCommand.cs
	namespace 	
SanAndreasAPI
 
{ 
[ 
Serializable 
] 
public 

class 
SocketCommand 
{ 
public 
SocketCommands 
Command %
;% &
public		 
SocketCommandData		  
Metadata		! )
;		) *
private 
SocketCommand 
( 
) 
{ 	
}
 
public 
SocketCommand 
( 
SocketCommands +
cmd, /
)/ 0
{ 	
Command 
= 
cmd 
; 
} 	
public 
SocketCommand 
( 
SocketCommands +
cmd, /
,/ 0
SocketCommandData1 B
metC F
)F G
{ 	
Command 
= 
cmd 
; 
Metadata 
= 
met 
; 
} 	
} 
} ª9
MD:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketCommandData.cs
	namespace 	
SanAndreasAPI
 
{ 
[ 
Serializable 
] 
public		 

class		 
SocketCommandData		 "
:		# $
IDictionary		% 0
<		0 1
string		1 7
,		7 8
object		9 ?
>		? @
{

 
private 

Dictionary 
< 
string !
,! "
object# )
>) *
_dict+ 0
=1 2
new3 6

Dictionary7 A
<A B
stringB H
,H I
objectJ P
>P Q
(Q R
)R S
;S T
public 
object 
	otherData 
;  
public 
object 
this 
[ 
string !
key" %
]% &
{ 	
get 
{ 
if 
( 
_dict 
. 
ContainsKey %
(% &
key& )
)) *
)* +
return 
_dict  
[  !
key! $
]$ %
;% &
return 
null 
; 
} 
set 
{ 
if 
( 
! 
_dict 
. 
ContainsKey &
(& '
key' *
)* +
)+ ,
_dict 
. 
Add 
( 
key !
,! "
value# (
)( )
;) *
else 
_dict 
[ 
key 
] 
=  
value! &
;& '
} 
} 	
private   
SocketCommandData   !
(  ! "
)  " #
{!! 	
}!!
 
public## 
SocketCommandData##  
(##  !

Dictionary##! +
<##+ ,
string##, 2
,##2 3
object##4 :
>##: ;
values##< B
)##B C
{$$ 	
_dict%% 
=%% 
values%% 
;%% 
}&& 	
public(( 
SocketCommandData((  
(((  !
object((! '
obj((( +
,((+ ,

Dictionary((- 7
<((7 8
string((8 >
,((> ?
object((@ F
>((F G
values((H N
)((N O
{)) 	
	otherData** 
=** 
obj** 
;** 
_dict++ 
=++ 
values++ 
;++ 
},, 	
public.. 
ICollection.. 
<.. 
string.. !
>..! "
Keys..# '
=>..( *
_dict..+ 0
...0 1
Keys..1 5
;..5 6
public00 
ICollection00 
<00 
object00 !
>00! "
Values00# )
=>00* ,
throw00- 2
new003 6#
NotImplementedException007 N
(00N O
)00O P
;00P Q
public22 
int22 
Count22 
=>22 
throw22 !
new22" %#
NotImplementedException22& =
(22= >
)22> ?
;22? @
public44 
bool44 

IsReadOnly44 
=>44 !
throw44" '
new44( +#
NotImplementedException44, C
(44C D
)44D E
;44E F
public66 
void66 
Add66 
(66 
string66 
key66 "
,66" #
object66$ *
value66+ 0
)660 1
{77 	
_dict88 
.88 
Add88 
(88 
key88 
,88 
value88  
)88  !
;88! "
}99 	
public;; 
void;; 
Add;; 
(;; 
KeyValuePair;; $
<;;$ %
string;;% +
,;;+ ,
object;;- 3
>;;3 4
item;;5 9
);;9 :
{<< 	
_dict>> 
.>> 
Add>> 
(>> 
item>> 
)>> 
;>> 
}?? 	
publicAA 
voidAA 
ClearAA 
(AA 
)AA 
{BB 	
_dictCC 
.CC 
ClearCC 
(CC 
)CC 
;CC 
}DD 	
publicFF 
boolFF 
ContainsFF 
(FF 
KeyValuePairFF )
<FF) *
stringFF* 0
,FF0 1
objectFF2 8
>FF8 9
itemFF: >
)FF> ?
{GG 	
returnHH 
_dictHH 
.HH 
ContainsHH !
(HH! "
itemHH" &
)HH& '
;HH' (
}II 	
publicKK 
boolKK 
ContainsKeyKK 
(KK  
stringKK  &
keyKK' *
)KK* +
{LL 	
returnMM 
_dictMM 
.MM 
ContainsKeyMM $
(MM$ %
keyMM% (
)MM( )
;MM) *
}NN 	
publicPP 
voidPP 
CopyToPP 
(PP 
KeyValuePairPP '
<PP' (
stringPP( .
,PP. /
objectPP0 6
>PP6 7
[PP7 8
]PP8 9
arrayPP: ?
,PP? @
intPPA D

arrayIndexPPE O
)PPO P
{QQ 	
throwRR 
newRR #
NotImplementedExceptionRR -
(RR- .
)RR. /
;RR/ 0
}SS 	
publicUU 
IEnumeratorUU 
<UU 
KeyValuePairUU '
<UU' (
stringUU( .
,UU. /
objectUU0 6
>UU6 7
>UU7 8
GetEnumeratorUU9 F
(UUF G
)UUG H
{VV 	
returnWW 
_dictWW 
.WW 
GetEnumeratorWW &
(WW& '
)WW' (
;WW( )
}XX 	
publicZZ 
boolZZ 
RemoveZZ 
(ZZ 
stringZZ !
keyZZ" %
)ZZ% &
{[[ 	
return\\ 
_dict\\ 
.\\ 
Remove\\ 
(\\  
key\\  #
)\\# $
;\\$ %
}]] 	
public__ 
bool__ 
Remove__ 
(__ 
KeyValuePair__ '
<__' (
string__( .
,__. /
object__0 6
>__6 7
item__8 <
)__< =
{`` 	
throwaa 
newaa #
NotImplementedExceptionaa -
(aa- .
)aa. /
;aa/ 0
}bb 	
publicdd 
booldd 
TryGetValuedd 
(dd  
stringdd  &
keydd' *
,dd* +
outdd, /
objectdd0 6
valuedd7 <
)dd< =
{ee 	
returnff 
_dictff 
.ff 
TryGetValueff $
(ff$ %
keyff% (
,ff( )
outff* -
valueff. 3
)ff3 4
;ff4 5
}gg 	
IEnumeratorii 
IEnumerableii 
.ii  
GetEnumeratorii  -
(ii- .
)ii. /
{jj 	
returnkk 
_dictkk 
.kk 
GetEnumeratorkk &
(kk& '
)kk' (
;kk( )
}ll 	
}mm 
}nn Èè
LD:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketExtensions.cs
	namespace

 	
SanAndreasAPI


 
{ 
public 

class 
MinMax 
< 
T 
> 
{ 
public 
T 
min 
, 
max 
; 
private 
MinMax 
( 
) 
{ 	
} 	
public 
MinMax 
( 
T 
mn 
, 
T 
mx  
)  !
{ 	
min 
= 
mn 
; 
max 
= 
mx 
; 
} 	
} 
public 

static 
class 
ArrayExtensions '
{ 
public 
static 
IEnumerable !
<! "
T" #
># $
JoinMultipleArray% 6
<6 7
T7 8
>8 9
(9 :
this: >
IEnumerable? J
<J K
TK L
[L M
]M N
>N O
arrayP U
)U V
{ 	
foreach 
( 
var 
el 
in 
array $
)$ %
for   
(   
int   
i   
=   
$num   
;   
i    !
<  " #
el  $ &
.  & '
Length  ' -
;  - .
++  / 1
i  1 2
)  2 3
yield!! 
return!!  
el!!! #
[!!# $
i!!$ %
]!!% &
;!!& '
}"" 	
}## 
public%% 

enum%% 
ImageFormats%% 
{&& 
JPG'' 
,'' 
PNG(( 
,(( 
BMP)) 
,)) 
TIFF** 
,** 
GIF++ 
,++ 
ICO,, 
}-- 
publicXX 

staticXX 
classXX 
SocketExtensionsXX (
{YY 
publicZZ 
staticZZ 
	IPAddressZZ 
GetLocalIPAddressZZ  1
(ZZ1 2
)ZZ2 3
{[[ 	
IPHostEntry\\ 
host\\ 
=\\ 
Dns\\ "
.\\" #
GetHostEntry\\# /
(\\/ 0
Dns\\0 3
.\\3 4
GetHostName\\4 ?
(\\? @
)\\@ A
)\\A B
;\\B C
foreach]] 
(]] 
var]] 
ip]] 
in]] 
host]] #
.]]# $
AddressList]]$ /
)]]/ 0
if^^ 
(^^ 
ip^^ 
.^^ 
AddressFamily^^ $
==^^% '
AddressFamily^^( 5
.^^5 6
InterNetwork^^6 B
)^^B C
return__ 
ip__ 
;__ 
throw`` 
new`` 
	Exception`` 
(``  
$str``  Y
)``Y Z
;``Z [
}aa 	
publiccc 
staticcc 
intcc 
GetObjectSizecc '
(cc' (
thiscc( ,
objectcc- 3

TestObjectcc4 >
)cc> ?
{dd 	
BinaryFormatteree 
bfee 
=ee  
newee! $
BinaryFormatteree% 4
(ee4 5
)ee5 6
;ee6 7
usingff 
(ff 
MemoryStreamff 
msff  "
=ff# $
newff% (
MemoryStreamff) 5
(ff5 6
)ff6 7
)ff7 8
{gg 
bytehh 
[hh 
]hh 
Arrayhh 
;hh 
bfii 
.ii 
	Serializeii 
(ii 
msii 
,ii  

TestObjectii! +
)ii+ ,
;ii, -
Arrayjj 
=jj 
msjj 
.jj 
ToArrayjj "
(jj" #
)jj# $
;jj$ %
returnkk 
Arraykk 
.kk 
Lengthkk #
;kk# $
}ll 
}mm 	
publicoo 
staticoo 
booloo 3
'FindFirstMissingNumberFromSequenceUlongoo B
(ooB C
thisooC G
IEnumerableooH S
<ooS T
ulongooT Y
>ooY Z
arroo[ ^
,oo^ _
outoo` c
ulongood i
nooj k
,ook l
MinMaxoom s
<oos t
ulongoot y
>ooy z
mnmxoo{ 
=
ooÄ Å
null
ooÇ Ü
)
ooÜ á
{pp 	
ifss 
(ss 
mnmxss 
!=ss 
nullss 
)ss 
{tt 
arruu 
.uu 
Adduu 
(uu 
mnmxuu 
.uu 
minuu  
)uu  !
;uu! "
arrvv 
.vv 
Addvv 
(vv 
mnmxvv 
.vv 
maxvv  
)vv  !
;vv! "
}ww 
IOrderedEnumerableyy 
<yy 
ulongyy $
>yy$ %
listyy& *
=yy+ ,
arryy- 0
.yy0 1
OrderByyy1 8
(yy8 9
xyy9 :
=>yy; =
xyy> ?
)yy? @
;yy@ A
bool}} 
b}} 
=}} 
false}} 
;}} 
n~~ 
=~~ 
$num~~ 
;~~ 
foreach
ÄÄ 
(
ÄÄ 
ulong
ÄÄ 
num
ÄÄ 
in
ÄÄ !
list
ÄÄ" &
)
ÄÄ& '
{
ÅÅ 
b
ÇÇ 
=
ÇÇ 
num
ÇÇ 
-
ÇÇ 
n
ÇÇ 
>
ÇÇ 
$num
ÇÇ 
;
ÇÇ  
if
ÉÉ 
(
ÉÉ 
b
ÉÉ 
)
ÉÉ 
break
ÑÑ 
;
ÑÑ 
else
ÖÖ 
n
ÜÜ 
=
ÜÜ 
num
ÜÜ 
;
ÜÜ 
}
áá 
n
ââ 
+=
ââ 
$num
ââ 
;
ââ 
return
ãã 
b
ãã 
;
ãã 
}
åå 	
public
éé 
static
éé 
bool
éé 0
"FindFirstMissingNumberFromSequence
éé =
<
éé= >
T
éé> ?
>
éé? @
(
éé@ A
this
ééA E
IEnumerable
ééF Q
<
ééQ R
T
ééR S
>
ééS T
arr
ééU X
,
ééX Y
out
ééZ ]
T
éé^ _
n
éé` a
,
ééa b
MinMax
ééc i
<
ééi j
T
ééj k
>
éék l
mnmx
éém q
=
éér s
null
éét x
)
ééx y
{
èè 	
if
íí 
(
íí 
!
íí 
arr
íí 
.
íí 
GetItemType
íí  
(
íí  !
)
íí! "
.
íí" #
IsNumericType
íí# 0
(
íí0 1
)
íí1 2
)
íí2 3
{
ìì 
Console
îî 
.
îî 
	WriteLine
îî !
(
îî! "
$str
îî" O
,
îîO P
typeof
îîQ W
(
îîW X
T
îîX Y
)
îîY Z
.
îîZ [
Name
îî[ _
)
îî_ `
;
îî` a
n
ïï 
=
ïï 
default
ïï 
(
ïï 
T
ïï 
)
ïï 
;
ïï 
return
ññ 
false
ññ 
;
ññ 
}
óó 
if
ôô 
(
ôô 
mnmx
ôô 
!=
ôô 
null
ôô 
)
ôô 
{
öö 
arr
õõ 
.
õõ 
Add
õõ 
(
õõ 
mnmx
õõ 
.
õõ 
min
õõ  
)
õõ  !
;
õõ! "
arr
úú 
.
úú 
Add
úú 
(
úú 
mnmx
úú 
.
úú 
max
úú  
)
úú  !
;
úú! "
}
ùù  
IOrderedEnumerable
üü 
<
üü 
T
üü  
>
üü  !
list
üü" &
=
üü' (
arr
üü) ,
.
üü, -
OrderBy
üü- 4
(
üü4 5
x
üü5 6
=>
üü7 9
x
üü: ;
)
üü; <
;
üü< =
bool
££ 
b
££ 
=
££ 
false
££ 
;
££ 
object
§§ 
n1
§§ 
=
§§ 
null
§§ 
;
§§ 
foreach
¶¶ 
(
¶¶ 
object
¶¶ 
num
¶¶ 
in
¶¶  "
list
¶¶# '
)
¶¶' (
{
ßß 
b
®® 
=
®® 
ExpressionMath
®® "
<
®®" #
object
®®# )
>
®®) *
.
®®* +
Default
®®+ 2
.
®®2 3
GreaterThan
®®3 >
(
®®> ?
ExpressionMath
®®? M
<
®®M N
object
®®N T
>
®®T U
.
®®U V
Default
®®V ]
.
®®] ^
Subtract
®®^ f
(
®®f g
num
®®g j
,
®®j k
n1
®®l n
==
®®o q
null
®®r v
?
®®w x
$num
®®y z
:
®®{ |
n1
®®} 
)®® Ä
,®®Ä Å
$num®®Ç É
)®®É Ñ
;®®Ñ Ö
if
©© 
(
©© 
b
©© 
)
©© 
break
™™ 
;
™™ 
else
´´ 
n1
¨¨ 
=
¨¨ 
(
¨¨ 
T
¨¨ 
)
¨¨ 
num
¨¨ 
;
¨¨  
}
≠≠ 
n1
ØØ 
=
ØØ 
(
ØØ 
T
ØØ 
)
ØØ 
ExpressionMath
ØØ "
<
ØØ" #
object
ØØ# )
>
ØØ) *
.
ØØ* +
Default
ØØ+ 2
.
ØØ2 3
Add
ØØ3 6
(
ØØ6 7
n1
ØØ7 9
,
ØØ9 :
$num
ØØ; <
)
ØØ< =
;
ØØ= >
n
∞∞ 
=
∞∞ 
(
∞∞ 
T
∞∞ 
)
∞∞ 
n1
∞∞ 
;
∞∞ 
return
≤≤ 
b
≤≤ 
;
≤≤ 
}
≥≥ 	
public
µµ 
static
µµ 
IEnumerable
µµ !
<
µµ! "
T
µµ" #
>
µµ# $,
FindMissingNumbersFromSequence
µµ% C
<
µµC D
T
µµD E
>
µµE F
(
µµF G
IEnumerable
µµG R
<
µµR S
T
µµS T
>
µµT U
arr
µµV Y
,
µµY Z
MinMax
µµ[ a
<
µµa b
T
µµb c
>
µµc d
mnmx
µµe i
=
µµj k
null
µµl p
)
µµp q
where
µµr w
T
µµx y
:
µµz {
structµµ| Ç
{
∂∂ 	
if
∑∑ 
(
∑∑ 
!
∑∑ 
arr
∑∑ 
.
∑∑ 
GetItemType
∑∑  
(
∑∑  !
)
∑∑! "
.
∑∑" #
IsNumericType
∑∑# 0
(
∑∑0 1
)
∑∑1 2
)
∑∑2 3
{
∏∏ 
Console
ππ 
.
ππ 
	WriteLine
ππ !
(
ππ! "
$str
ππ" O
,
ππO P
typeof
ππQ W
(
ππW X
T
ππX Y
)
ππY Z
.
ππZ [
Name
ππ[ _
)
ππ_ `
;
ππ` a
yield
∫∫ 
break
∫∫ 
;
∫∫ 
}
ªª 
if
ΩΩ 
(
ΩΩ 
mnmx
ΩΩ 
!=
ΩΩ 
null
ΩΩ 
)
ΩΩ 
{
ææ 
arr
øø 
.
øø 
Add
øø 
(
øø 
mnmx
øø 
.
øø 
min
øø  
)
øø  !
;
øø! "
arr
¿¿ 
.
¿¿ 
Add
¿¿ 
(
¿¿ 
mnmx
¿¿ 
.
¿¿ 
max
¿¿  
)
¿¿  !
;
¿¿! "
}
¡¡  
IOrderedEnumerable
√√ 
<
√√ 
T
√√  
>
√√  !
list
√√" &
=
√√' (
arr
√√) ,
.
√√, -
OrderBy
√√- 4
(
√√4 5
x
√√5 6
=>
√√7 9
x
√√: ;
)
√√; <
;
√√< =
T
ƒƒ 
n
ƒƒ 
=
ƒƒ 
default
ƒƒ 
(
ƒƒ 
T
ƒƒ 
)
ƒƒ 
;
ƒƒ 
foreach
∆∆ 
(
∆∆ 
object
∆∆ 
num
∆∆ 
in
∆∆  "
list
∆∆# '
)
∆∆' (
{
«« 
T
»» 
op
»» 
=
»» 
(
»» 
T
»» 
)
»» 
ExpressionMath
»» (
<
»»( )
object
»») /
>
»»/ 0
.
»»0 1
Default
»»1 8
.
»»8 9
Subtract
»»9 A
(
»»A B
num
»»B E
,
»»E F
n
»»G H
)
»»H I
;
»»I J
if
…… 
(
…… 
ExpressionMath
…… "
<
……" #
T
……# $
>
……$ %
.
……% &
Default
……& -
.
……- .
GreaterThan
……. 9
(
……9 :
op
……: <
,
……< =
$num
……> ?
.
……? @
ConvertGeneric
……@ N
<
……N O
T
……O P
>
……P Q
(
……Q R
)
……R S
)
……S T
)
……T U
{
   
int
ÀÀ 
max
ÀÀ 
=
ÀÀ 
op
ÀÀ  
.
ÀÀ  !
ConvertValue
ÀÀ! -
<
ÀÀ- .
int
ÀÀ. 1
>
ÀÀ1 2
(
ÀÀ2 3
)
ÀÀ3 4
;
ÀÀ4 5
for
ÃÃ 
(
ÃÃ 
int
ÃÃ 
l
ÃÃ 
=
ÃÃ  
$num
ÃÃ! "
;
ÃÃ" #
l
ÃÃ$ %
<
ÃÃ& '
max
ÃÃ( +
;
ÃÃ+ ,
++
ÃÃ- /
l
ÃÃ/ 0
)
ÃÃ0 1
yield
ÕÕ 
return
ÕÕ $
ExpressionMath
ÕÕ% 3
<
ÕÕ3 4
T
ÕÕ4 5
>
ÕÕ5 6
.
ÕÕ6 7
Default
ÕÕ7 >
.
ÕÕ> ?
Add
ÕÕ? B
(
ÕÕB C
n
ÕÕC D
,
ÕÕD E
l
ÕÕF G
.
ÕÕG H
ConvertValue
ÕÕH T
<
ÕÕT U
T
ÕÕU V
>
ÕÕV W
(
ÕÕW X
)
ÕÕX Y
)
ÕÕY Z
;
ÕÕZ [
}
ŒŒ 
n
œœ 
=
œœ 
(
œœ 
T
œœ 
)
œœ 
num
œœ 
;
œœ 
}
–– 
}
—— 	
public
”” 
static
”” 
Type
”” 
GetItemType
”” &
<
””& '
T
””' (
>
””( )
(
””) *
this
””* .
IEnumerable
””/ :
<
””: ;
T
””; <
>
””< =

enumerable
””> H
)
””H I
{
‘‘ 	
return
’’ 
typeof
’’ 
(
’’ 
T
’’ 
)
’’ 
;
’’ 
}
÷÷ 	
public
ÿÿ 
static
ÿÿ 
T
ÿÿ 
ConvertGeneric
ÿÿ &
<
ÿÿ& '
T
ÿÿ' (
>
ÿÿ( )
(
ÿÿ) *
this
ÿÿ* .
object
ÿÿ/ 5
o
ÿÿ6 7
)
ÿÿ7 8
{
ŸŸ 	
return
⁄⁄ 
(
⁄⁄ 
T
⁄⁄ 
)
⁄⁄ 
o
⁄⁄ 
;
⁄⁄ 
}
€€ 	
public
ﬁﬁ 
static
ﬁﬁ 
T
ﬁﬁ 
ConvertValue
ﬁﬁ $
<
ﬁﬁ$ %
T
ﬁﬁ% &
>
ﬁﬁ& '
(
ﬁﬁ' (
this
ﬁﬁ( ,
object
ﬁﬁ- 3
o
ﬁﬁ4 5
)
ﬁﬁ5 6
where
ﬁﬁ7 <
T
ﬁﬁ= >
:
ﬁﬁ? @
struct
ﬁﬁA G
{
ﬂﬂ 	
return
‡‡ 
(
‡‡ 
T
‡‡ 
)
‡‡ 
Convert
‡‡ 
.
‡‡ 

ChangeType
‡‡ (
(
‡‡( )
o
‡‡) *
,
‡‡* +
typeof
‡‡, 2
(
‡‡2 3
T
‡‡3 4
)
‡‡4 5
)
‡‡5 6
;
‡‡6 7
}
·· 	
public
„„ 
static
„„ 
bool
„„ 
IsNumericType
„„ (
<
„„( )
T
„„) *
>
„„* +
(
„„+ ,
this
„„, 0
T
„„1 2
o
„„3 4
)
„„4 5
{
‰‰ 	
return
ÂÂ 
typeof
ÂÂ 
(
ÂÂ 
T
ÂÂ 
)
ÂÂ 
.
ÂÂ 
IsNumericType
ÂÂ *
(
ÂÂ* +
)
ÂÂ+ ,
;
ÂÂ, -
}
ÊÊ 	
public
ËË 
static
ËË 
bool
ËË 
IsNumericType
ËË (
(
ËË( )
this
ËË) -
Type
ËË. 2
type
ËË3 7
)
ËË7 8
{
ÈÈ 	
switch
ÍÍ 
(
ÍÍ 
Type
ÍÍ 
.
ÍÍ 
GetTypeCode
ÍÍ $
(
ÍÍ$ %
type
ÍÍ% )
)
ÍÍ) *
)
ÍÍ* +
{
ÎÎ 
case
ÏÏ 
TypeCode
ÏÏ 
.
ÏÏ 
Byte
ÏÏ "
:
ÏÏ" #
case
ÌÌ 
TypeCode
ÌÌ 
.
ÌÌ 
SByte
ÌÌ #
:
ÌÌ# $
case
ÓÓ 
TypeCode
ÓÓ 
.
ÓÓ 
UInt16
ÓÓ $
:
ÓÓ$ %
case
ÔÔ 
TypeCode
ÔÔ 
.
ÔÔ 
UInt32
ÔÔ $
:
ÔÔ$ %
case
 
TypeCode
 
.
 
UInt64
 $
:
$ %
case
ÒÒ 
TypeCode
ÒÒ 
.
ÒÒ 
Int16
ÒÒ #
:
ÒÒ# $
case
ÚÚ 
TypeCode
ÚÚ 
.
ÚÚ 
Int32
ÚÚ #
:
ÚÚ# $
case
ÛÛ 
TypeCode
ÛÛ 
.
ÛÛ 
Int64
ÛÛ #
:
ÛÛ# $
case
ÙÙ 
TypeCode
ÙÙ 
.
ÙÙ 
Decimal
ÙÙ %
:
ÙÙ% &
case
ıı 
TypeCode
ıı 
.
ıı 
Double
ıı $
:
ıı$ %
case
ˆˆ 
TypeCode
ˆˆ 
.
ˆˆ 
Single
ˆˆ $
:
ˆˆ$ %
return
˜˜ 
true
˜˜ 
;
˜˜  
default
˘˘ 
:
˘˘ 
return
˙˙ 
false
˙˙  
;
˙˙  !
}
˚˚ 
}
¸¸ 	
public
˛˛ 
static
˛˛ 
IEnumerable
˛˛ !
<
˛˛! "
T
˛˛" #
>
˛˛# $
Add
˛˛% (
<
˛˛( )
T
˛˛) *
>
˛˛* +
(
˛˛+ ,
this
˛˛, 0
IEnumerable
˛˛1 <
<
˛˛< =
T
˛˛= >
>
˛˛> ?
e
˛˛@ A
,
˛˛A B
T
˛˛C D
value
˛˛E J
)
˛˛J K
{
ˇˇ 	
foreach
ÄÄ 
(
ÄÄ 
var
ÄÄ 
cur
ÄÄ 
in
ÄÄ 
e
ÄÄ  !
)
ÄÄ! "
{
ÅÅ 
yield
ÇÇ 
return
ÇÇ 
cur
ÇÇ  
;
ÇÇ  !
}
ÉÉ 
yield
ÑÑ 
return
ÑÑ 
value
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
}
ÜÜ 
}áá ¬y
ID:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketGlobals.cs
	namespace 	
SanAndreasAPI
 
{ 
public 

enum 
SocketDbgType 
{ 
Client 
, 
Server		 
}

 
public 

enum 
SocketState 
{ 

NonStarted 
, 
ClientStarted 
, 
ServerStarted 
, 
ClientStopped 
, 
ServerStopped 
} 
public 

enum 
SocketCommands 
{ 
Conn 
, 
ConfirmConnId 
, 
CloseClients 
, 
ClosedClient 
, 
Stop 
, 
UnpoliteStop 
, 
CustomCommand 
, 
CreateConnId"" 
,"" 
CloseInstance$$ 
}%% 
public'' 

static'' 
class'' 
SocketGlobals'' %
{(( 
public)) 
const)) 
int)) 
gBufferSize)) $
=))% &
$num))' +
;))+ ,
public++ 
class++ 
AsyncReceiveState++ &
:++' (
IDisposable++) 4
{,, 	
public-- 
System-- 
.-- 
Net-- 
.-- 
Sockets-- %
.--% &
Socket--& ,
Socket--- 3
;--3 4
public.. 
byte.. 
[.. 
].. 
Buffer..  
=..! "
new..# &
byte..' +
[..+ ,
gBufferSize.., 7
]..7 8
;..8 9
internal00 
MemoryStream00 !
_packetBuff00" -
;00- .
public33 
MemoryStream33 
PacketBufferStream33  2
{44 
get55 
{66 
if77 
(77 
_packetBuff77 #
==77$ &
null77' +
)77+ ,
{88 
Console99 
.99  
	WriteLine99  )
(99) *
$str99* G
)99G H
;99H I
_packetBuff:: #
=::$ %
new::& )
MemoryStream::* 6
(::6 7
)::7 8
;::8 9
};; 
return<< 
_packetBuff<< &
;<<& '
}== 
set>> 
{?? 
_packetBuff@@ 
=@@  !
value@@" '
;@@' (
}AA 
}BB 
publicDD 
objectDD 
PacketDD  
;DD  !
publicGG 
intGG 
ReceiveSizeGG "
;GG" #
publicJJ 
intJJ 
TotalBytesReceivedJJ )
;JJ) *
publicMM 
voidMM 
DisposeMM 
(MM  
)MM  !
{NN 
DisposeOO 
(OO 
trueOO 
)OO 
;OO 
GCPP 
.PP 
SuppressFinalizePP #
(PP# $
thisPP$ (
)PP( )
;PP) *
}QQ 
privateSS 
boolSS 
disposedSS !
;SS! "
	protectedVV 
virtualVV 
voidVV "
DisposeVV# *
(VV* +
boolVV+ /
	disposingVV0 9
)VV9 :
{WW 
ifXX 
(XX 
disposedXX 
)XX 
returnYY 
;YY 
if[[ 
([[ 
	disposing[[ 
)[[ 
{\\ 
_packetBuff^^ 
.^^  
Dispose^^  '
(^^' (
)^^( )
;^^) *
Array__ 
.__ 
Clear__ 
(__  
Buffer__  &
,__& '
$num__( )
,__) *
Buffer__+ 1
.__1 2
Length__2 8
)__8 9
;__9 :
}bb 
disposedff 
=ff 
trueff 
;ff  
}gg 
}hh 	
publicjj 
classjj 
AsyncSendStatejj #
:jj$ %
IDisposablejj& 1
{kk 	
publicll 
Systemll 
.ll 
Netll 
.ll 
Socketsll %
.ll% &
Socketll& ,
Socketll- 3
;ll3 4
publicoo 
byteoo 
[oo 
]oo 
BytesToSendoo %
;oo% &
publicqq 
intqq 
Progressqq 
;qq  
publicss 
AsyncSendStatess !
(ss! "
Systemss" (
.ss( )
Netss) ,
.ss, -
Socketsss- 4
.ss4 5
Socketss5 ;
	argSocketss< E
)ssE F
{tt 
Socketuu 
=uu 
	argSocketuu "
;uu" #
}vv 
publicxx 
intxx 

NextOffsetxx !
(xx! "
)xx" #
{yy 
returnzz 
Progresszz 
;zz  
}{{ 
public}} 
int}} 

NextLength}} !
(}}! "
)}}" #
{~~ 
if 
( 
BytesToSend 
.  
Length  &
-' (
Progress) 1
>2 3
gBufferSize4 ?
)? @
{
ÄÄ 
return
ÅÅ 
gBufferSize
ÅÅ &
;
ÅÅ& '
}
ÇÇ 
else
ÉÉ 
{
ÑÑ 
return
ÖÖ 
BytesToSend
ÖÖ &
.
ÖÖ& '
Length
ÖÖ' -
-
ÖÖ. /
Progress
ÖÖ0 8
;
ÖÖ8 9
}
ÜÜ 
}
áá 
public
ää 
void
ää 
Dispose
ää 
(
ää  
)
ää  !
{
ãã 
Dispose
åå 
(
åå 
true
åå 
)
åå 
;
åå 
GC
çç 
.
çç 
SuppressFinalize
çç #
(
çç# $
this
çç$ (
)
çç( )
;
çç) *
}
éé 
private
êê 
bool
êê 
disposed
êê !
;
êê! "
	protected
ìì 
virtual
ìì 
void
ìì "
Dispose
ìì# *
(
ìì* +
bool
ìì+ /
	disposing
ìì0 9
)
ìì9 :
{
îî 
if
ïï 
(
ïï 
disposed
ïï 
)
ïï 
return
ññ 
;
ññ 
if
òò 
(
òò 
	disposing
òò 
)
òò 
{
ôô 
Array
õõ 
.
õõ 
Clear
õõ 
(
õõ  
BytesToSend
õõ  +
,
õõ+ ,
$num
õõ- .
,
õõ. /
BytesToSend
õõ0 ;
.
õõ; <
Length
õõ< B
)
õõB C
;
õõC D
}
ûû 
disposed
¢¢ 
=
¢¢ 
true
¢¢ 
;
¢¢  
}
££ 
}
§§ 	
public
¶¶ 
class
¶¶ 
MessageQueue
¶¶ !
{
ßß 	
public
®® 
System
®® 
.
®® 
Collections
®® %
.
®®% &
Queue
®®& +
Messages
®®, 4
=
®®5 6
new
®®7 :
System
®®; A
.
®®A B
Collections
®®B M
.
®®M N
Queue
®®N S
(
®®S T
)
®®T U
;
®®U V
public
©© 
bool
©© 

Processing
©© "
;
©©" #
public
´´ 
event
´´ '
MessageQueuedEventHandler
´´ 2
MessageQueued
´´3 @
;
´´@ A
public
≠≠ 
delegate
≠≠ 
void
≠≠  '
MessageQueuedEventHandler
≠≠! :
(
≠≠: ;
)
≠≠; <
;
≠≠< =
public
ØØ 
void
ØØ 
Add
ØØ 
(
ØØ 
AsyncSendState
ØØ *
argState
ØØ+ 3
)
ØØ3 4
{
∞∞ 
Messages
±± 
.
±± 
Enqueue
±±  
(
±±  !
argState
±±! )
)
±±) *
;
±±* +
MessageQueued
≤≤ 
?
≤≤ 
.
≤≤ 
Invoke
≤≤ %
(
≤≤% &
)
≤≤& '
;
≤≤' (
}
≥≥ 
}
¥¥ 	
public
∂∂ 
static
∂∂ 
class
∂∂ 
SocketManager
∂∂ )
{
∑∑ 	
public
ææ 
static
ææ 
object
ææ  
SendCommand
ææ! ,
(
ææ, -
SocketCommands
ææ- ;
cmd
ææ< ?
,
ææ? @
SocketCommandData
ææA R
data
ææS W
,
ææW X
ulong
ææY ^
OriginClientId
ææ_ m
=
ææn o
$num
ææp q
)
ææq r
{
øø 
return
¿¿ 
new
¿¿ 
SocketMessage
¿¿ (
(
¿¿( )
OriginClientId
¿¿) 7
,
¿¿7 8
new
¿¿9 <
SocketCommand
¿¿= J
(
¿¿J K
cmd
¿¿K N
,
¿¿N O
data
¿¿P T
)
¿¿T U
)
¿¿U V
;
¿¿V W
}
¡¡ 
private
√√ 
static
√√ 
object
√√ !
SendCommand
√√" -
(
√√- .
SocketCommands
√√. <
cmd
√√= @
,
√√@ A
ulong
√√B G
OriginClientId
√√H V
=
√√W X
$num
√√Y Z
)
√√Z [
{
ƒƒ 
return
≈≈ 
new
≈≈ 
SocketMessage
≈≈ (
(
≈≈( )
OriginClientId
≈≈) 7
,
≈≈7 8
new
≈≈9 <
SocketCommand
≈≈= J
(
≈≈J K
cmd
≈≈K N
)
≈≈N O
)
≈≈O P
;
≈≈P Q
}
∆∆ 
public
»» 
static
»» 
object
»»  

SendObject
»»! +
(
»»+ ,
object
»», 2
obj
»»3 6
,
»»6 7
ulong
»»8 =
OriginClientId
»»> L
)
»»L M
{
…… 
return
   
new
   
SocketMessage
   (
(
  ( )
OriginClientId
  ) 7
,
  7 8
obj
  9 <
)
  < =
;
  = >
}
ÀÀ 
public
œœ 
static
œœ 
object
œœ  

SendConnId
œœ! +
(
œœ+ ,
ulong
œœ, 1
clientId
œœ2 :
)
œœ: ;
{
–– 
return
—— 
SendCommand
—— "
(
——" #
SocketCommands
——# 1
.
——1 2
CreateConnId
——2 >
,
——> ?
clientId
——@ H
)
——H I
;
——I J
}
““ 
public
‘‘ 
static
‘‘ 
object
‘‘  
ConfirmConnId
‘‘! .
(
‘‘. /
ulong
‘‘/ 4
id
‘‘5 7
)
‘‘7 8
{
’’ 
return
÷÷ 
SendCommand
÷÷ "
(
÷÷" #
SocketCommands
÷÷# 1
.
÷÷1 2
ConfirmConnId
÷÷2 ?
,
÷÷? @
id
÷÷A C
)
÷÷C D
;
÷÷D E
}
◊◊ 
public
⁄⁄ 
static
⁄⁄ 
object
⁄⁄  
ManagedConn
⁄⁄! ,
(
⁄⁄, -
)
⁄⁄- .
{
€€ 
return
‹‹ 
SendCommand
‹‹ "
(
‹‹" #
SocketCommands
‹‹# 1
.
‹‹1 2
Conn
‹‹2 6
)
‹‹6 7
;
‹‹7 8
}
›› 
public
ﬂﬂ 
static
ﬂﬂ 
object
ﬂﬂ  
PoliteClose
ﬂﬂ! ,
(
ﬂﬂ, -
ulong
ﬂﬂ- 2
id
ﬂﬂ3 5
=
ﬂﬂ6 7
$num
ﬂﬂ8 9
)
ﬂﬂ9 :
{
‡‡ 
return
·· 
SendCommand
·· "
(
··" #
SocketCommands
··# 1
.
··1 2
CloseInstance
··2 ?
)
··? @
;
··@ A
}
‚‚ 
public
‰‰ 
static
‰‰ 
object
‰‰  
ClientClosed
‰‰! -
(
‰‰- .
ulong
‰‰. 3
id
‰‰4 6
=
‰‰7 8
$num
‰‰9 :
)
‰‰: ;
{
ÂÂ 
return
ÊÊ 
SendCommand
ÊÊ "
(
ÊÊ" #
SocketCommands
ÊÊ# 1
.
ÊÊ1 2
ClosedClient
ÊÊ2 >
)
ÊÊ> ?
;
ÊÊ? @
}
ÁÁ 
}
ËË 	
public
ÍÍ 
class
ÍÍ !
SocketServerConsole
ÍÍ (
{
ÎÎ 	
public
ÓÓ !
SocketServerConsole
ÓÓ &
(
ÓÓ& '
)
ÓÓ' (
{
ÔÔ 
}
 
public
˜˜ 
void
˜˜ 
Log
˜˜ 
(
˜˜ 
string
˜˜ "
str
˜˜# &
,
˜˜& '
params
˜˜( .
object
˜˜/ 5
[
˜˜5 6
]
˜˜6 7
str0
˜˜8 <
)
˜˜< =
{
¯¯ 
Log
˘˘ 
(
˘˘ 
string
˘˘ 
.
˘˘ 
Format
˘˘ !
(
˘˘! "
str
˘˘" %
,
˘˘% &
str0
˘˘' +
)
˘˘+ ,
)
˘˘, -
;
˘˘- .
}
˙˙ 
public
¸¸ 
void
¸¸ 
Log
¸¸ 
(
¸¸ 
string
¸¸ "
str
¸¸# &
)
¸¸& '
{
˝˝ 
Console
˛˛ 
.
˛˛ 
	WriteLine
˛˛ !
(
˛˛! "
str
˛˛" %
)
˛˛% &
;
˛˛& '
}
àà 
}
ââ 	
public
ãã 
class
ãã !
SocketClientConsole
ãã (
{
åå 	
private
êê 
readonly
êê 
bool
êê !

writeLines
êê" ,
=
êê- .
true
êê/ 3
;
êê3 4
private
íí !
SocketClientConsole
íí '
(
íí' (
)
íí( )
{
ìì 
}
îî 
public
ññ !
SocketClientConsole
ññ &
(
ññ& '
bool
ññ' +
wl
ññ, .
=
ññ/ 0
true
ññ1 5
)
ññ5 6
{
óó 

writeLines
ôô 
=
ôô 
wl
ôô 
;
ôô  
}
öö 
public
úú 
void
úú 
Log
úú 
(
úú 
string
úú "
str
úú# &
,
úú& '
params
úú( .
object
úú/ 5
[
úú5 6
]
úú6 7
str0
úú8 <
)
úú< =
{
ùù 
Log
ûû 
(
ûû 
string
ûû 
.
ûû 
Format
ûû !
(
ûû! "
str
ûû" %
,
ûû% &
str0
ûû' +
)
ûû+ ,
)
ûû, -
;
ûû- .
}
üü 
public
°° 
void
°° 
Log
°° 
(
°° 
string
°° "
str
°°# &
)
°°& '
{
¢¢ 
if
££ 
(
££ 

writeLines
££ 
)
££ 
Console
§§ 
.
§§ 
	WriteLine
§§ %
(
§§% &
$str
§§& 8
+
§§9 :
str
§§; >
)
§§> ?
;
§§? @
}
ÆÆ 
public
∞∞ 
void
∞∞ 
LogError
∞∞  
(
∞∞  !
string
∞∞! '
str
∞∞( +
,
∞∞+ ,
params
∞∞- 3
object
∞∞4 :
[
∞∞: ;
]
∞∞; <
str0
∞∞= A
)
∞∞A B
{
±± 
LogError
≤≤ 
(
≤≤ 
string
≤≤ 
.
≤≤  
Format
≤≤  &
(
≤≤& '
str
≤≤' *
,
≤≤* +
str0
≤≤, 0
)
≤≤0 1
)
≤≤1 2
;
≤≤2 3
}
≥≥ 
public
µµ 
void
µµ 
LogError
µµ  
(
µµ  !
string
µµ! '
str
µµ( +
)
µµ+ ,
{
∂∂ 
if
∑∑ 
(
∑∑ 

writeLines
∑∑ 
)
∑∑ 
Console
∏∏ 
.
∏∏ 
	WriteLine
∏∏ %
(
∏∏% &
$str
∏∏& >
+
∏∏? @
str
∏∏A D
)
∏∏D E
;
∏∏E F
}
¬¬ 
}
√√ 	
}
ƒƒ 
}≈≈ ÷
ID:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketMessage.cs
	namespace 	
SanAndreasAPI
 
{ 
[ 
Serializable 
] 
public		 

class		 
SocketMessage		 
{

 
public 
string 
StringValue !
{ 	
get 
{ 
try 
{ 
return 
( 
string "
)" #
msg# &
;& '
} 
catch 
{ 
return 
$str 
; 
} 
} 
} 	
public 
int 
IntValue 
{ 	
get 
{ 
try 
{   
return!! 
(!! 
int!! 
)!!  
msg!!  #
;!!# $
}"" 
catch## 
{$$ 
return%% 
-%% 
$num%% 
;%% 
}&& 
}'' 
}(( 	
[** 	
Obsolete**	 
]** 
public++ 
ulong++ 
id++ 
{,, 	
get-- 
{.. 
return// 
ClientOriginId// %
;//% &
}00 
}11 	
public66 
ulong66 
ClientOriginId66 #
;66# $
public88 
ulong88 
[88 
]88 
DestsId88 
=88  
new88! $
ulong88% *
[88* +
$num88+ ,
]88, -
{88. /
ulong880 5
.885 6
MaxValue886 >
}88? @
;88@ A
public;; 
Type;; 
Type;; 
{<< 	
get== 
{>> 
return?? 
msg?? 
.?? 
GetType?? "
(??" #
)??# $
;??$ %
}@@ 
}AA 	
publicGG 
objectGG 
msgGG 
;GG 
publicNN 
SocketMessageNN 
(NN 
ulongNN "
oiNN# %
,NN% &
objectNN' -
mNN. /
)NN/ 0
{OO 	
ClientOriginIdPP 
=PP 
oiPP 
;PP  
msgRR 
=RR 
mRR 
;RR 
}SS 	
publicUU 
voidUU 

SetDestIdsUU 
(UU 
paramsUU %
ulongUU& +
[UU+ ,
]UU, -
idsUU. 1
)UU1 2
{VV 	
DestsIdWW 
=WW 
idsWW 
;WW 
}XX 	
publicZZ 
TZZ 
TryGetObjectZZ 
<ZZ 
TZZ 
>ZZ  
(ZZ  !
)ZZ! "
{[[ 	
return\\ 
(\\ 
T\\ 
)\\ 
msg\\ 
;\\ 
}]] 	
}^^ 
}__ ú¯
HD:\UNITY\Unity Projects\SanAndreasUnity\VS\SanAndreasAPI\SocketServer.cs
	namespace		 	
SanAndreasAPI		
 
{

 
public 

class 
SocketServer 
: 
IDisposable  +
{ 
public 
SocketServerConsole "
myLogger# +
=, -
new. 1
SocketServerConsole2 E
(E F
)F G
;G H
public 
const 
int 
DefPort  
=! "
$num# '
;' (
public 
Socket 
ServerSocket "
;" #
public!! 
SocketPermission!! 
	Permision!!  )
;!!) *
public&& 
	IPAddress&& 
IP&& 
;&& 
public++ 
int++ 
Port++ 
;++ 
[-- 	
Obsolete--	 
(-- 
$str-- &
)--& '
]--' (
private.. 

IPEndPoint.. 
	_endpoint.. $
;..$ %
public33 
static33 
ManualResetEvent33 &
allDone33' .
=33/ 0
new331 4
ManualResetEvent335 E
(33E F
false33F K
)33K L
;33L M
public88 
static88 

Dictionary88  
<88  !
ulong88! &
,88& '
Socket88( .
>88. /
routingTable880 <
=88= >
new88? B

Dictionary88C M
<88M N
ulong88N S
,88S T
Socket88U [
>88[ \
(88\ ]
)88] ^
;88^ _
public:: 
Action:: 
<:: 
object:: 
,:: 
Socket:: $
>::$ %)
ReceivedClientMessageCallback::& C
;::C D
private<< 
static<< 
bool<< 
dispose<< #
,<<# $
debug<<% *
;<<* +
public@@ 
event@@ '
ClientConnectedEventHandler@@ 0
ClientConnected@@1 @
;@@@ A
publicBB 
eventBB '
MessageReceivedEventHandlerBB 0
MessageReceivedBB1 @
;BB@ A
publicDD 
eventDD *
ClientDisconnectedEventHandlerDD 3
ClientDisconnectedDD4 F
;DDF G
publicFF 
delegateFF 
voidFF '
ClientConnectedEventHandlerFF 8
(FF8 9
SocketFF9 ?
argClientSocketFF@ O
)FFO P
;FFP Q
publicHH 
delegateHH 
voidHH '
MessageReceivedEventHandlerHH 8
(HH8 9
stringHH9 ?

argMessageHH@ J
,HHJ K
SocketHHL R
argClientSocketHHS b
)HHb c
;HHc d
publicJJ 
delegateJJ 
voidJJ *
ClientDisconnectedEventHandlerJJ ;
(JJ; <
SocketJJ< B
argClientSocketJJC R
)JJR S
;JJS T
privatePP 
SocketStatePP 
_statePP "
;PP" #
publicRR 
SocketStateRR 
myStateRR "
{SS 	
getTT 
{UU 
returnVV 
_stateVV 
;VV 
}WW 
}XX 	
internal\\ 

IPEndPoint\\ 
IPEnd\\ !
{]] 	
get^^ 
{__ 
if`` 
(`` 
IP`` 
!=`` 
null`` 
)`` 
{aa 
ifbb 
(bb 
	_endpointbb !
==bb" $
nullbb% )
)bb) *
	_endpointcc !
=cc" #
newcc$ '

IPEndPointcc( 2
(cc2 3
IPcc3 5
,cc5 6
Portcc7 ;
)cc; <
;cc< =
returndd 
	_endpointdd $
;dd$ %
}ee 
elseff 
returnff 
nullff  
;ff  !
}gg 
}hh 	
publicuu 
SocketServeruu 
(uu 
booluu  
debuguu! &
,uu& '
booluu( ,
doConnectionuu- 9
=uu: ;
falseuu< A
)uuA B
:uuC D
thisvv 
(vv 
newvv 
SocketPermissionvv %
(vv% &
NetworkAccessvv& 3
.vv3 4
Acceptvv4 :
,vv: ;
TransportTypevv< I
.vvI J
TcpvvJ M
,vvM N
$strvvO Q
,vvQ R
SocketPermissionvvS c
.vvc d
AllPortsvvd l
)vvl m
,vvm n
Dnsvvo r
.vvr s
GetHostEntryvvs 
(	vv Ä
$str
vvÄ Ç
)
vvÇ É
.
vvÉ Ñ
AddressList
vvÑ è
[
vvè ê
$num
vvê ë
]
vvë í
,
vví ì
DefPort
vvî õ
,
vvõ ú

SocketType
vvù ß
.
vvß ®
Stream
vv® Æ
,
vvÆ Ø
ProtocolType
vv∞ º
.
vvº Ω
Tcp
vvΩ ¿
,
vv¿ ¡
debug
vv¬ «
,
vv« »
doConnection
vv… ’
)
vv’ ÷
{ww 	
}ww
 
public
ÄÄ 
SocketServer
ÄÄ 
(
ÄÄ 
string
ÄÄ "
ip
ÄÄ# %
,
ÄÄ% &
int
ÄÄ' *
port
ÄÄ+ /
,
ÄÄ/ 0
bool
ÄÄ1 5
debug
ÄÄ6 ;
,
ÄÄ; <
bool
ÄÄ= A
doConnection
ÄÄB N
=
ÄÄO P
false
ÄÄQ V
)
ÄÄV W
:
ÄÄX Y
this
ÅÅ 
(
ÅÅ 
new
ÅÅ 
SocketPermission
ÅÅ %
(
ÅÅ% &
NetworkAccess
ÅÅ& 3
.
ÅÅ3 4
Accept
ÅÅ4 :
,
ÅÅ: ;
TransportType
ÅÅ< I
.
ÅÅI J
Tcp
ÅÅJ M
,
ÅÅM N
$str
ÅÅO Q
,
ÅÅQ R
SocketPermission
ÅÅS c
.
ÅÅc d
AllPorts
ÅÅd l
)
ÅÅl m
,
ÅÅm n
	IPAddress
ÅÅo x
.
ÅÅx y
Parse
ÅÅy ~
(
ÅÅ~ 
ipÅÅ Å
)ÅÅÅ Ç
,ÅÅÇ É
portÅÅÑ à
,ÅÅà â

SocketTypeÅÅä î
.ÅÅî ï
StreamÅÅï õ
,ÅÅõ ú
ProtocolTypeÅÅù ©
.ÅÅ© ™
TcpÅÅ™ ≠
,ÅÅ≠ Æ
debugÅÅØ ¥
,ÅÅ¥ µ
doConnectionÅÅ∂ ¬
)ÅÅ¬ √
{
ÇÇ 	
}
ÇÇ
 
public
éé 
SocketServer
éé 
(
éé 
SocketPermission
éé ,

permission
éé- 7
,
éé7 8
	IPAddress
éé9 B
ipAddr
ééC I
,
ééI J
int
ééK N
port
ééO S
,
ééS T

SocketType
ééU _
sType
éé` e
,
éée f
ProtocolType
éég s
pType
éét y
,
ééy z
bool
éé{ 
curDebugééÄ à
,ééà â
boolééä é
doConnectionééè õ
=ééú ù
falseééû £
)éé£ §
{
èè 	

permission
êê 
.
êê 
Demand
êê 
(
êê 
)
êê 
;
êê  
IP
íí 
=
íí 
ipAddr
íí 
;
íí 
Port
ìì 
=
ìì 
port
ìì 
;
ìì 
debug
ïï 
=
ïï 
curDebug
ïï 
;
ïï 
ServerSocket
óó 
=
óó 
new
óó 
Socket
óó %
(
óó% &
ipAddr
óó& ,
.
óó, -
AddressFamily
óó- :
,
óó: ;
sType
óó< A
,
óóA B
pType
óóC H
)
óóH I
;
óóI J
if
ôô 
(
ôô 
doConnection
ôô 
)
ôô 
StartServer
öö 
(
öö 
)
öö 
;
öö 
}
õõ 	
public
°° 
void
°° 
InitializeServer
°° $
(
°°$ %
)
°°% &
{
¢¢ 	
}
££ 	
public
©© 
void
©© 
StartServer
©© 
(
©©  
)
©©  !
{
™™ 	
ServerSocket
ÆÆ 
.
ÆÆ 
Bind
ÆÆ 
(
ÆÆ 
IPEnd
ÆÆ #
)
ÆÆ# $
;
ÆÆ$ %
ServerSocket
±± 
.
±± 
Listen
±± 
(
±±  
$num
±±  $
)
±±$ %
;
±±% &
ServerSocket
¥¥ 
.
¥¥ 
BeginAccept
¥¥ $
(
¥¥$ %
new
¥¥% (
AsyncCallback
¥¥) 6
(
¥¥6 7
ClientAccepted
¥¥7 E
)
¥¥E F
,
¥¥F G
ServerSocket
¥¥H T
)
¥¥T U
;
¥¥U V
}
µµ 	
public
∑∑ 
void
∑∑ 

StopServer
∑∑ 
(
∑∑ 
)
∑∑  
{
∏∏ 	
ServerSocket
∫∫ 
.
∫∫ 
Close
∫∫ 
(
∫∫ 
)
∫∫  
;
∫∫  !
}
ºº 	
public
√√ 
void
√√ 
ClientAccepted
√√ "
(
√√" #
IAsyncResult
√√# /
ar
√√0 2
)
√√2 3
{
ƒƒ 	
Socket
∆∆ 
mServerSocket
∆∆  
=
∆∆! "
(
∆∆# $
Socket
∆∆$ *
)
∆∆* +
ar
∆∆+ -
.
∆∆- .

AsyncState
∆∆. 8
;
∆∆8 9
Socket
»» 
mClientSocket
»»  
=
»»! "
null
»»# '
;
»»' (
try
…… 
{
   
mClientSocket
ÀÀ 
=
ÀÀ 
mServerSocket
ÀÀ  -
.
ÀÀ- .
	EndAccept
ÀÀ. 7
(
ÀÀ7 8
ar
ÀÀ8 :
)
ÀÀ: ;
;
ÀÀ; <
}
ÃÃ 
catch
ÕÕ 
{
ŒŒ 
return
–– 
;
–– 
}
—— 
SocketGlobals
”” 
.
”” 
AsyncReceiveState
”” +
mState
””, 2
=
””3 4
new
””5 8
SocketGlobals
””9 F
.
””F G
AsyncReceiveState
””G X
(
””X Y
)
””Y Z
;
””Z [
mState
‘‘ 
.
‘‘ 
Socket
‘‘ 
=
‘‘ 
mClientSocket
‘‘ )
;
‘‘) *
ClientConnected
’’ 
?
’’ 
.
’’ 
Invoke
’’ #
(
’’# $
mState
’’$ *
.
’’* +
Socket
’’+ 1
)
’’1 2
;
’’2 3
mState
÷÷ 
.
÷÷ 
Socket
÷÷ 
.
÷÷ 
BeginReceive
÷÷ &
(
÷÷& '
mState
÷÷' -
.
÷÷- .
Buffer
÷÷. 4
,
÷÷4 5
$num
÷÷6 7
,
÷÷7 8
SocketGlobals
÷÷9 F
.
÷÷F G
gBufferSize
÷÷G R
,
÷÷R S
SocketFlags
÷÷T _
.
÷÷_ `
None
÷÷` d
,
÷÷d e
new
÷÷f i
AsyncCallback
÷÷j w
(
÷÷w x$
ClientMessageReceived÷÷x ç
)÷÷ç é
,÷÷é è
mState÷÷ê ñ
)÷÷ñ ó
;÷÷ó ò
mServerSocket
ÿÿ 
.
ÿÿ 
BeginAccept
ÿÿ %
(
ÿÿ% &
new
ÿÿ& )
AsyncCallback
ÿÿ* 7
(
ÿÿ7 8
ClientAccepted
ÿÿ8 F
)
ÿÿF G
,
ÿÿG H
mServerSocket
ÿÿI V
)
ÿÿV W
;
ÿÿW X
}
‹‹ 	
public
„„ 
void
„„ #
ClientMessageReceived
„„ )
(
„„) *
IAsyncResult
„„* 6
ar
„„7 9
)
„„9 :
{
‰‰ 	
SocketGlobals
ÊÊ 
.
ÊÊ 
AsyncReceiveState
ÊÊ +
mState
ÊÊ, 2
=
ÊÊ3 4
(
ÊÊ5 6
SocketGlobals
ÊÊ6 C
.
ÊÊC D
AsyncReceiveState
ÊÊD U
)
ÊÊU V
ar
ÊÊV X
.
ÊÊX Y

AsyncState
ÊÊY c
;
ÊÊc d
int
ÈÈ 
numBytesReceived
ÈÈ  
=
ÈÈ! "
$num
ÈÈ# $
;
ÈÈ$ %
try
ÍÍ 
{
ÎÎ 
numBytesReceived
ÏÏ  
=
ÏÏ! "
mState
ÏÏ# )
.
ÏÏ) *
Socket
ÏÏ* 0
.
ÏÏ0 1

EndReceive
ÏÏ1 ;
(
ÏÏ; <
ar
ÏÏ< >
)
ÏÏ> ?
;
ÏÏ? @
}
ÌÌ 
catch
ÓÓ 
(
ÓÓ 
SocketException
ÓÓ "
ex
ÓÓ# %
)
ÓÓ% &
{
ÔÔ 
if
ÒÒ 
(
ÒÒ 
ex
ÒÒ 
.
ÒÒ 
SocketErrorCode
ÒÒ &
==
ÒÒ' )
SocketError
ÒÒ* 5
.
ÒÒ5 6
ConnectionReset
ÒÒ6 E
)
ÒÒE F
{
ÚÚ  
ClientDisconnected
ÛÛ &
?
ÛÛ& '
.
ÛÛ' (
Invoke
ÛÛ( .
(
ÛÛ. /
mState
ÛÛ/ 5
.
ÛÛ5 6
Socket
ÛÛ6 <
)
ÛÛ< =
;
ÛÛ= >
return
ÙÙ 
;
ÙÙ 
}
ıı 
}
ˆˆ 
if
¯¯ 
(
¯¯ 
numBytesReceived
¯¯  
==
¯¯! #
$num
¯¯$ %
)
¯¯% &
{
˘˘  
ClientDisconnected
˙˙ "
?
˙˙" #
.
˙˙# $
Invoke
˙˙$ *
(
˙˙* +
mState
˙˙+ 1
.
˙˙1 2
Socket
˙˙2 8
)
˙˙8 9
;
˙˙9 :
return
˚˚ 
;
˚˚ 
}
¸¸ 
if
ˇˇ 
(
ˇˇ 
mState
ˇˇ 
.
ˇˇ 
ReceiveSize
ˇˇ "
==
ˇˇ# %
$num
ˇˇ& '
)
ˇˇ' (
{
ÄÄ 
mState
ÇÇ 
.
ÇÇ 
ReceiveSize
ÇÇ "
=
ÇÇ# $
BitConverter
ÇÇ% 1
.
ÇÇ1 2
ToInt32
ÇÇ2 9
(
ÇÇ9 :
mState
ÇÇ: @
.
ÇÇ@ A
Buffer
ÇÇA G
,
ÇÇG H
$num
ÇÇI J
)
ÇÇJ K
;
ÇÇK L
mState
ÑÑ 
.
ÑÑ  
PacketBufferStream
ÑÑ )
.
ÑÑ) *
Write
ÑÑ* /
(
ÑÑ/ 0
mState
ÑÑ0 6
.
ÑÑ6 7
Buffer
ÑÑ7 =
,
ÑÑ= >
$num
ÑÑ? @
,
ÑÑ@ A
numBytesReceived
ÑÑB R
-
ÑÑS T
$num
ÑÑU V
)
ÑÑV W
;
ÑÑW X
}
ÖÖ 
else
ÜÜ 
{
áá 
mState
ââ 
.
ââ  
PacketBufferStream
ââ )
.
ââ) *
Write
ââ* /
(
ââ/ 0
mState
ââ0 6
.
ââ6 7
Buffer
ââ7 =
,
ââ= >
$num
ââ? @
,
ââ@ A
numBytesReceived
ââB R
)
ââR S
;
ââS T
}
ää 
mState
çç 
.
çç  
TotalBytesReceived
çç %
+=
çç& (
numBytesReceived
çç) 9
;
çç9 :
if
êê 
(
êê 
mState
êê 
.
êê  
TotalBytesReceived
êê )
<
êê* +
mState
êê, 2
.
êê2 3
ReceiveSize
êê3 >
)
êê> ?
{
ëë 
mState
îî 
.
îî 
Socket
îî 
.
îî 
BeginReceive
îî *
(
îî* +
mState
îî+ 1
.
îî1 2
Buffer
îî2 8
,
îî8 9
$num
îî: ;
,
îî; <
SocketGlobals
îî= J
.
îîJ K
gBufferSize
îîK V
,
îîV W
SocketFlags
îîX c
.
îîc d
None
îîd h
,
îîh i
new
îîj m
AsyncCallback
îîn {
(
îî{ |$
ClientMessageReceivedîî| ë
)îîë í
,îîí ì
mStateîîî ö
)îîö õ
;îîõ ú
}
ïï 
else
ññ 
{
óó 
System
öö 
.
öö 
Runtime
öö 
.
öö 
Serialization
öö ,
.
öö, -

Formatters
öö- 7
.
öö7 8
Binary
öö8 >
.
öö> ?
BinaryFormatter
öö? N
mSerializer
ööO Z
=
öö[ \
new
öö] `
System
ööa g
.
öög h
Runtime
ööh o
.
ööo p
Serialization
ööp }
.
öö} ~

Formattersöö~ à
.ööà â
Binaryööâ è
.ööè ê
BinaryFormatterööê ü
(ööü †
)öö† °
;öö° ¢
mState
úú 
.
úú  
PacketBufferStream
úú )
.
úú) *
Position
úú* 2
=
úú3 4
$num
úú5 6
;
úú6 7
mState
ûû 
.
ûû 
Packet
ûû 
=
ûû 
mSerializer
ûû  +
.
ûû+ ,
Deserialize
ûû, 7
(
ûû7 8
mState
ûû8 >
.
ûû> ? 
PacketBufferStream
ûû? Q
)
ûûQ R
;
ûûR S
Console
üü 
.
üü 
	WriteLine
üü !
(
üü! "
$str
üü" P
,
üüP Q
mState
üüR X
.
üüX Y
Packet
üüY _
.
üü_ `
GetType
üü` g
(
üüg h
)
üüh i
.
üüi j
Name
üüj n
)
üün o
;
üüo p(
ParseReceivedClientMessage
°° *
(
°°* +
mState
°°+ 1
.
°°1 2
Packet
°°2 8
,
°°8 9
mState
°°: @
.
°°@ A
Socket
°°A G
)
°°G H
;
°°H I
SocketGlobals
££ 
.
££ 
AsyncReceiveState
££ /

mNextState
££0 :
=
££; <
new
££= @
SocketGlobals
££A N
.
££N O
AsyncReceiveState
££O `
(
££` a
)
££a b
;
££b c

mNextState
§§ 
.
§§ 
Socket
§§ !
=
§§" #
mState
§§$ *
.
§§* +
Socket
§§+ 1
;
§§1 2
mState
ßß 
.
ßß  
PacketBufferStream
ßß )
.
ßß) *
Close
ßß* /
(
ßß/ 0
)
ßß0 1
;
ßß1 2
mState
®® 
.
®®  
PacketBufferStream
®® )
.
®®) *
Dispose
®®* 1
(
®®1 2
)
®®2 3
;
®®3 4
mState
©© 
.
©©  
PacketBufferStream
©© )
=
©©* +
null
©©, 0
;
©©0 1
Array
™™ 
.
™™ 
Clear
™™ 
(
™™ 
mState
™™ "
.
™™" #
Buffer
™™# )
,
™™) *
$num
™™+ ,
,
™™, -
mState
™™. 4
.
™™4 5
Buffer
™™5 ;
.
™™; <
Length
™™< B
)
™™B C
;
™™C D
Console
¨¨ 
.
¨¨ 
	WriteLine
¨¨ !
(
¨¨! "
$str
¨¨" q
,
¨¨q r
ar
¨¨s u
.
¨¨u v%
CompletedSynchronously¨¨v å
,¨¨å ç
ar¨¨é ê
.¨¨ê ë
IsCompleted¨¨ë ú
)¨¨ú ù
;¨¨ù û

mNextState
ÆÆ 
.
ÆÆ 
Socket
ÆÆ !
.
ÆÆ! "
BeginReceive
ÆÆ" .
(
ÆÆ. /

mNextState
ÆÆ/ 9
.
ÆÆ9 :
Buffer
ÆÆ: @
,
ÆÆ@ A
$num
ÆÆB C
,
ÆÆC D
SocketGlobals
ÆÆE R
.
ÆÆR S
gBufferSize
ÆÆS ^
,
ÆÆ^ _
SocketFlags
ÆÆ` k
.
ÆÆk l
None
ÆÆl p
,
ÆÆp q
new
ÆÆr u
AsyncCallbackÆÆv É
(ÆÆÉ Ñ%
ClientMessageReceivedÆÆÑ ô
)ÆÆô ö
,ÆÆö õ

mNextStateÆÆú ¶
)ÆÆ¶ ß
;ÆÆß ®
mState
±± 
=
±± 
null
±± 
;
±± 
}
≤≤ 
}
≥≥ 	
public
µµ 
void
µµ (
ParseReceivedClientMessage
µµ .
(
µµ. /
object
µµ/ 5
obj
µµ6 9
,
µµ9 :
Socket
µµ; A
	argClient
µµB K
)
µµK L
{
∂∂ 	
if
∏∏ 
(
∏∏ 
obj
∏∏ 
is
∏∏ 
string
∏∏ 
)
∏∏ 
{
ππ 
string
∫∫ 
argCommandString
∫∫ '
=
∫∫( )
(
∫∫* +
string
∫∫+ 1
)
∫∫1 2
obj
∫∫2 5
;
∫∫5 6
myLogger
ªª 
.
ªª 
Log
ªª 
(
ªª 
$str
ªª ;
+
ªª< =
argCommandString
ªª> N
)
ªªN O
;
ªªO P
string
ææ 

argCommand
ææ !
=
ææ" #
null
ææ$ (
;
ææ( )
string
øø 
argText
øø 
=
øø  
null
øø! %
;
øø% &
if
¡¡ 
(
¡¡ 
argCommandString
¡¡ $
.
¡¡$ %

StartsWith
¡¡% /
(
¡¡/ 0
$str
¡¡0 3
)
¡¡3 4
)
¡¡4 5
{
¬¬ 

argCommand
√√ 
=
√√  
argCommandString
√√! 1
.
√√1 2
	Substring
√√2 ;
(
√√; <
$num
√√< =
,
√√= >
argCommandString
√√? O
.
√√O P
IndexOf
√√P W
(
√√W X
$str
√√X [
)
√√[ \
)
√√\ ]
;
√√] ^
argText
ƒƒ 
=
ƒƒ 
argCommandString
ƒƒ .
.
ƒƒ. /
Remove
ƒƒ/ 5
(
ƒƒ5 6
$num
ƒƒ6 7
,
ƒƒ7 8

argCommand
ƒƒ9 C
.
ƒƒC D
Length
ƒƒD J
+
ƒƒK L
$num
ƒƒM N
)
ƒƒN O
;
ƒƒO P
}
≈≈ 
else
∆∆ 
argText
«« 
=
«« 
argCommandString
«« .
;
««. /
switch
…… 
(
…… 
argText
…… 
)
……  
{
   
case
ÀÀ 
$str
ÀÀ $
:
ÀÀ$ %!
SendMessageToClient
ÃÃ +
(
ÃÃ+ ,
$str
ÃÃ, B
,
ÃÃB C
	argClient
ÃÃD M
)
ÃÃM N
;
ÃÃN O
break
ÕÕ 
;
ÕÕ 
}
ŒŒ 
MessageReceived
–– 
?
––  
.
––  !
Invoke
––! '
(
––' (
argCommandString
––( 8
,
––8 9
	argClient
––: C
)
––C D
;
––D E
}
—— 
else
““ 
if
““ 
(
““ 
obj
““ 
is
““ 
SocketMessage
““ )
)
““) *
HandleAction
”” 
(
”” 
(
”” 
SocketMessage
”” +
)
””+ ,
obj
””, /
,
””/ 0
	argClient
””1 :
)
””: ;
;
””; <+
ReceivedClientMessageCallback
÷÷ )
?
÷÷) *
.
÷÷* +
Invoke
÷÷+ 1
(
÷÷1 2
obj
÷÷2 5
,
÷÷5 6
	argClient
÷÷7 @
)
÷÷@ A
;
÷÷A B
}
ÿÿ 	
public
ﬁﬁ 
void
ﬁﬁ 
SendToClient
ﬁﬁ  
(
ﬁﬁ  !
object
ﬁﬁ! '
obj
ﬁﬁ( +
,
ﬁﬁ+ ,
Socket
ﬁﬁ- 3
	argClient
ﬁﬁ4 =
)
ﬁﬁ= >
{
ﬂﬂ 	
System
·· 
.
·· 
Runtime
·· 
.
·· 
Serialization
·· (
.
··( )

Formatters
··) 3
.
··3 4
Binary
··4 :
.
··: ;
BinaryFormatter
··; J
mSerializer
··K V
=
··W X
new
··Y \
System
··] c
.
··c d
Runtime
··d k
.
··k l
Serialization
··l y
.
··y z

Formatters··z Ñ
.··Ñ Ö
Binary··Ö ã
.··ã å
BinaryFormatter··å õ
(··õ ú
)··ú ù
;··ù û
using
‚‚ 
(
‚‚ 
System
‚‚ 
.
‚‚ 
IO
‚‚ 
.
‚‚ 
MemoryStream
‚‚ )
mSerializerStream
‚‚* ;
=
‚‚< =
new
‚‚> A
System
‚‚B H
.
‚‚H I
IO
‚‚I K
.
‚‚K L
MemoryStream
‚‚L X
(
‚‚X Y
)
‚‚Y Z
)
‚‚Z [
{
„„ 
mSerializer
‰‰ 
.
‰‰ 
	Serialize
‰‰ %
(
‰‰% &
mSerializerStream
‰‰& 7
,
‰‰7 8
obj
‰‰9 <
)
‰‰< =
;
‰‰= >
byte
ÁÁ 
[
ÁÁ 
]
ÁÁ 
mPacketBytes
ÁÁ #
=
ÁÁ$ %
mSerializerStream
ÁÁ& 7
.
ÁÁ7 8
	GetBuffer
ÁÁ8 A
(
ÁÁA B
)
ÁÁB C
;
ÁÁC D
byte
ÍÍ 
[
ÍÍ 
]
ÍÍ 

mSizeBytes
ÍÍ !
=
ÍÍ" #
BitConverter
ÍÍ$ 0
.
ÍÍ0 1
GetBytes
ÍÍ1 9
(
ÍÍ9 :
mPacketBytes
ÍÍ: F
.
ÍÍF G
Length
ÍÍG M
+
ÍÍN O
$num
ÍÍP Q
)
ÍÍQ R
;
ÍÍR S
SocketGlobals
ÌÌ 
.
ÌÌ 
AsyncSendState
ÌÌ ,
mState
ÌÌ- 3
=
ÌÌ4 5
new
ÌÌ6 9
SocketGlobals
ÌÌ: G
.
ÌÌG H
AsyncSendState
ÌÌH V
(
ÌÌV W
	argClient
ÌÌW `
)
ÌÌ` a
;
ÌÌa b
Array
ÒÒ 
.
ÒÒ 
Resize
ÒÒ 
(
ÒÒ 
ref
ÒÒ  
mState
ÒÒ! '
.
ÒÒ' (
BytesToSend
ÒÒ( 3
,
ÒÒ3 4
mPacketBytes
ÒÒ5 A
.
ÒÒA B
Length
ÒÒB H
+
ÒÒI J

mSizeBytes
ÒÒK U
.
ÒÒU V
Length
ÒÒV \
)
ÒÒ\ ]
;
ÒÒ] ^
Buffer
ÙÙ 
.
ÙÙ 
	BlockCopy
ÙÙ  
(
ÙÙ  !

mSizeBytes
ÙÙ! +
,
ÙÙ+ ,
$num
ÙÙ- .
,
ÙÙ. /
mState
ÙÙ0 6
.
ÙÙ6 7
BytesToSend
ÙÙ7 B
,
ÙÙB C
$num
ÙÙD E
,
ÙÙE F

mSizeBytes
ÙÙG Q
.
ÙÙQ R
Length
ÙÙR X
)
ÙÙX Y
;
ÙÙY Z
Buffer
ıı 
.
ıı 
	BlockCopy
ıı  
(
ıı  !
mPacketBytes
ıı! -
,
ıı- .
$num
ıı/ 0
,
ıı0 1
mState
ıı2 8
.
ıı8 9
BytesToSend
ıı9 D
,
ııD E

mSizeBytes
ııF P
.
ııP Q
Length
ııQ W
,
ııW X
mPacketBytes
ııY e
.
ııe f
Length
ııf l
)
ııl m
;
ıım n
Array
˜˜ 
.
˜˜ 
Clear
˜˜ 
(
˜˜ 

mSizeBytes
˜˜ &
,
˜˜& '
$num
˜˜( )
,
˜˜) *

mSizeBytes
˜˜+ 5
.
˜˜5 6
Length
˜˜6 <
)
˜˜< =
;
˜˜= >
Array
¯¯ 
.
¯¯ 
Clear
¯¯ 
(
¯¯ 
mPacketBytes
¯¯ (
,
¯¯( )
$num
¯¯* +
,
¯¯+ ,
mPacketBytes
¯¯- 9
.
¯¯9 :
Length
¯¯: @
)
¯¯@ A
;
¯¯A B
Console
˙˙ 
.
˙˙ 
Write
˙˙ 
(
˙˙ 
$str
˙˙  
)
˙˙  !
;
˙˙! "
Console
˝˝ 
.
˝˝ 
	WriteLine
˝˝ !
(
˝˝! "
$str
˝˝" [
,
˝˝[ \
mState
˝˝] c
.
˝˝c d

NextOffset
˝˝d n
(
˝˝n o
)
˝˝o p
,
˝˝p q
mState
˝˝r x
.
˝˝x y

NextLength˝˝y É
(˝˝É Ñ
)˝˝Ñ Ö
)˝˝Ö Ü
;˝˝Ü á
	argClient
˛˛ 
.
˛˛ 
	BeginSend
˛˛ #
(
˛˛# $
mState
˛˛$ *
.
˛˛* +
BytesToSend
˛˛+ 6
,
˛˛6 7
mState
˛˛8 >
.
˛˛> ?

NextOffset
˛˛? I
(
˛˛I J
)
˛˛J K
,
˛˛K L
mState
˛˛M S
.
˛˛S T

NextLength
˛˛T ^
(
˛˛^ _
)
˛˛_ `
,
˛˛` a
SocketFlags
˛˛b m
.
˛˛m n
None
˛˛n r
,
˛˛r s
new
˛˛t w
AsyncCallback˛˛x Ö
(˛˛Ö Ü
MessagePartSent˛˛Ü ï
)˛˛ï ñ
,˛˛ñ ó
mState˛˛ò û
)˛˛û ü
;˛˛ü †
}
ˇˇ 
}
ÄÄ 	
public
ÜÜ 
void
ÜÜ !
SendMessageToClient
ÜÜ '
(
ÜÜ' (
string
ÜÜ( .
argCommandString
ÜÜ/ ?
,
ÜÜ? @
Socket
ÜÜA G
	argClient
ÜÜH Q
)
ÜÜQ R
{
áá 	
SendToClient
àà 
(
àà 
argCommandString
àà )
,
àà) *
	argClient
àà+ 4
)
àà4 5
;
àà5 6
}
ââ 	
public
ãã 
void
ãã 
MessagePartSent
ãã #
(
ãã# $
IAsyncResult
ãã$ 0
ar
ãã1 3
)
ãã3 4
{
åå 	
SocketGlobals
éé 
.
éé 
AsyncSendState
éé (
mState
éé) /
=
éé0 1
(
éé2 3
SocketGlobals
éé3 @
.
éé@ A
AsyncSendState
ééA O
)
ééO P
ar
ééP R
.
ééR S

AsyncState
ééS ]
;
éé] ^
try
êê 
{
ëë 
int
íí 
numBytesSent
íí  
=
íí! "
$num
íí# $
;
íí$ %
numBytesSent
ïï 
=
ïï 
mState
ïï %
.
ïï% &
Socket
ïï& ,
.
ïï, -
EndSend
ïï- 4
(
ïï4 5
ar
ïï5 7
)
ïï7 8
;
ïï8 9
mState
òò 
.
òò 
Progress
òò 
+=
òò  "
numBytesSent
òò# /
;
òò/ 0
if
õõ 
(
õõ 
mState
õõ 
.
õõ 

NextLength
õõ %
(
õõ% &
)
õõ& '
>
õõ( )
$num
õõ* +
)
õõ+ ,
{
úú 
mState
ûû 
.
ûû 
Socket
ûû !
.
ûû! "
	BeginSend
ûû" +
(
ûû+ ,
mState
ûû, 2
.
ûû2 3
BytesToSend
ûû3 >
,
ûû> ?
mState
ûû@ F
.
ûûF G

NextOffset
ûûG Q
(
ûûQ R
)
ûûR S
,
ûûS T
mState
ûûU [
.
ûû[ \

NextLength
ûû\ f
(
ûûf g
)
ûûg h
,
ûûh i
SocketFlags
ûûj u
.
ûûu v
None
ûûv z
,
ûûz {
new
ûû| 
AsyncCallbackûûÄ ç
(ûûç é
MessagePartSentûûé ù
)ûûù û
,ûûû ü
mStateûû† ¶
)ûû¶ ß
;ûûß ®
}
üü 
else
†† 
{
°° 
Console
¢¢ 
.
¢¢ 
	WriteLine
¢¢ %
(
¢¢% &
$str
¢¢& [
)
¢¢[ \
;
¢¢\ ]
Array
§§ 
.
§§ 
Clear
§§ 
(
§§  
mState
§§  &
.
§§& '
BytesToSend
§§' 2
,
§§2 3
$num
§§4 5
,
§§5 6
mState
§§7 =
.
§§= >
BytesToSend
§§> I
.
§§I J
Length
§§J P
)
§§P Q
;
§§Q R
mState
ßß 
=
ßß 
null
ßß !
;
ßß! "
}
®® 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
myLogger
ÆÆ 
.
ÆÆ 
Log
ÆÆ 
(
ÆÆ 
$str
ÆÆ /
+
ÆÆ0 1
ex
ÆÆ2 4
.
ÆÆ4 5
Message
ÆÆ5 <
)
ÆÆ< =
;
ÆÆ= >
}
ØØ 
}
∞∞ 	
private
∂∂ 
void
∂∂ 
HandleAction
∂∂ !
(
∂∂! "
SocketMessage
∂∂" /
sm
∂∂0 2
,
∂∂2 3
Socket
∂∂4 :
handler
∂∂; B
)
∂∂B C
{
∑∑ 	
if
ππ 
(
ππ 
sm
ππ 
.
ππ 
msg
ππ 
is
ππ 
SocketCommand
ππ '
)
ππ' (
{
∫∫ 
SocketCommand
ªª 
cmd
ªª !
=
ªª" #
sm
ªª$ &
.
ªª& '
TryGetObject
ªª' 3
<
ªª3 4
SocketCommand
ªª4 A
>
ªªA B
(
ªªB C
)
ªªC D
;
ªªD E
if
ºº 
(
ºº 
cmd
ºº 
!=
ºº 
null
ºº 
)
ºº  
{
ΩΩ 
switch
ææ 
(
ææ 
cmd
ææ 
.
ææ  
Command
ææ  '
)
ææ' (
{
øø 
case
¿¿ 
SocketCommands
¿¿ +
.
¿¿+ ,
Conn
¿¿, 0
:
¿¿0 1
ulong
∆∆ !
genID
∆∆" '
=
∆∆( )
$num
∆∆* +
;
∆∆+ ,
bool
……  
b
……! "
=
……# $
routingTable
……% 1
.
……1 2
Keys
……2 6
.
……6 75
'FindFirstMissingNumberFromSequenceUlong
……7 ^
(
……^ _
out
……_ b
genID
……c h
,
……h i
new
……j m
MinMax
……n t
<
……t u
ulong
……u z
>
……z {
(
……{ |
$num
……| }
,
……} ~
(…… Ä
ulong……Ä Ö
)……Ö Ü
routingTable……Ü í
.……í ì
Count……ì ò
)……ò ô
)……ô ö
;……ö õ
myLogger
   $
.
  $ %
Log
  % (
(
  ( )
$str
  ) O
,
  O P
genID
  Q V
)
  V W
;
  W X
SendToClient
ÃÃ (
(
ÃÃ( )
SocketManager
ÃÃ) 6
.
ÃÃ6 7

SendConnId
ÃÃ7 A
(
ÃÃA B
genID
ÃÃB G
)
ÃÃG H
,
ÃÃH I
handler
ÃÃJ Q
)
ÃÃQ R
;
ÃÃR S
break
ÕÕ !
;
ÕÕ! "
case
œœ 
SocketCommands
œœ +
.
œœ+ ,
ConfirmConnId
œœ, 9
:
œœ9 :
routingTable
–– (
.
––( )
Add
––) ,
(
––, -
sm
––- /
.
––/ 0
id
––0 2
,
––2 3
handler
––4 ;
)
––; <
;
––< =
break
—— !
;
——! "
case
”” 
SocketCommands
”” +
.
””+ ,
CloseClients
””, 8
:
””8 9
CloseAllClients
‘‘ +
(
‘‘+ ,
sm
‘‘, .
.
‘‘. /
id
‘‘/ 1
)
‘‘1 2
;
‘‘2 3
break
’’ !
;
’’! "
case
◊◊ 
SocketCommands
◊◊ +
.
◊◊+ ,
ClosedClient
◊◊, 8
:
◊◊8 9
SocketManager
ŸŸ )
.
ŸŸ) *
PoliteClose
ŸŸ* 5
(
ŸŸ5 6
sm
ŸŸ6 8
.
ŸŸ8 9
id
ŸŸ9 ;
)
ŸŸ; <
;
ŸŸ< =
routingTable
⁄⁄ (
.
⁄⁄( )
Remove
⁄⁄) /
(
⁄⁄/ 0
sm
⁄⁄0 2
.
⁄⁄2 3
id
⁄⁄3 5
)
⁄⁄5 6
;
⁄⁄6 7*
CloseServerAfterClientsClose
€€ 8
(
€€8 9
dispose
€€9 @
)
€€@ A
;
€€A B
break
‹‹ !
;
‹‹! "
case
ﬁﬁ 
SocketCommands
ﬁﬁ +
.
ﬁﬁ+ ,
Stop
ﬁﬁ, 0
:
ﬁﬁ0 1
CloseAllClients
ﬂﬂ +
(
ﬂﬂ+ ,
sm
ﬂﬂ, .
.
ﬂﬂ. /
id
ﬂﬂ/ 1
)
ﬂﬂ1 2
;
ﬂﬂ2 3
break
‡‡ !
;
‡‡! "
case
‚‚ 
SocketCommands
‚‚ +
.
‚‚+ ,
UnpoliteStop
‚‚, 8
:
‚‚8 9
object
„„ "
d
„„# $
=
„„% &
cmd
„„' *
.
„„* +
Metadata
„„+ 3
[
„„3 4
$str
„„4 =
]
„„= >
;
„„> ?
Stop
‰‰  
(
‰‰  !
d
‰‰! "
!=
‰‰# %
null
‰‰& *
&&
‰‰+ -
(
‰‰. /
(
‰‰/ 0
bool
‰‰0 4
)
‰‰4 5
d
‰‰5 6
)
‰‰6 7
)
‰‰7 8
;
‰‰8 9
break
ÂÂ !
;
ÂÂ! "
default
ÁÁ 
:
ÁÁ  
DoServerError
ËË )
(
ËË) *
string
ËË* 0
.
ËË0 1
Format
ËË1 7
(
ËË7 8
$str
ËË8 v
,
ËËv w
cmd
ËËx {
.
ËË{ |
CommandËË| É
)ËËÉ Ñ
,ËËÑ Ö
smËËÜ à
.ËËà â
idËËâ ã
)ËËã å
;ËËå ç
break
ÈÈ !
;
ÈÈ! "
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 
else
ÌÌ 
SendToClient
ÔÔ 
(
ÔÔ 
sm
ÔÔ 
,
ÔÔ  
sm
ÔÔ! #
.
ÔÔ# $
DestsId
ÔÔ$ +
)
ÔÔ+ ,
;
ÔÔ, -
}
 	
private
ÙÙ 
void
ÙÙ 
SendToAllClients
ÙÙ %
(
ÙÙ% &
SocketMessage
ÙÙ& 3
sm
ÙÙ4 6
,
ÙÙ6 7
object
ÙÙ8 >
obj
ÙÙ? B
=
ÙÙC D
null
ÙÙE I
,
ÙÙI J
int
ÙÙK N
	bytesRead
ÙÙO X
=
ÙÙY Z
$num
ÙÙ[ \
)
ÙÙ\ ]
{
ıı 	
myLogger
ˆˆ 
.
ˆˆ 
Log
ˆˆ 
(
ˆˆ 
$str
ˆˆ 6
)
ˆˆ6 7
;
ˆˆ7 8
if
˜˜ 
(
˜˜ 
	bytesRead
˜˜ 
>
˜˜ 
$num
˜˜ 
)
˜˜ 
myLogger
˜˜ '
.
˜˜' (
Log
˜˜( +
(
˜˜+ ,
$str
˜˜, W
,
˜˜W X
sm
˜˜Y [
.
˜˜[ \
id
˜˜\ ^
,
˜˜^ _
	bytesRead
˜˜` i
)
˜˜i j
;
˜˜j k
myLogger
¯¯ 
.
¯¯ 
Log
¯¯ 
(
¯¯ 
$str
¯¯ 8
)
¯¯8 9
;
¯¯9 :
myLogger
˘˘ 
.
˘˘ 
Log
˘˘ 
(
˘˘ 
$str
˘˘ 6
)
˘˘6 7
;
˘˘7 8
myLogger
˙˙ 
.
˙˙ 
Log
˙˙ 
(
˙˙ 
$str
˙˙ 
)
˙˙ 
;
˙˙ 
foreach
˝˝ 
(
˝˝ 
KeyValuePair
˝˝ !
<
˝˝! "
ulong
˝˝" '
,
˝˝' (
Socket
˝˝) /
>
˝˝/ 0
soc
˝˝1 4
in
˝˝5 7
routingTable
˝˝8 D
)
˝˝D E
if
˛˛ 
(
˛˛ 
soc
˛˛ 
.
˛˛ 
Key
˛˛ 
!=
˛˛ 
sm
˛˛ !
.
˛˛! "
id
˛˛" $
)
˛˛$ %
SendToClient
ˇˇ  
(
ˇˇ  !
obj
ˇˇ! $
==
ˇˇ% '
null
ˇˇ( ,
?
ˇˇ- .
sm
ˇˇ/ 1
:
ˇˇ2 3
obj
ˇˇ4 7
,
ˇˇ7 8
soc
ˇˇ9 <
.
ˇˇ< =
Value
ˇˇ= B
)
ˇˇB C
;
ˇˇC D
}
ÄÄ 	
private
ÇÇ 
void
ÇÇ 
SendToClient
ÇÇ !
(
ÇÇ! "
SocketMessage
ÇÇ" /
sm
ÇÇ0 2
,
ÇÇ2 3
object
ÇÇ4 :
obj
ÇÇ; >
=
ÇÇ? @
null
ÇÇA E
,
ÇÇE F
params
ÇÇG M
ulong
ÇÇN S
[
ÇÇS T
]
ÇÇT U
dests
ÇÇV [
)
ÇÇ[ \
{
ÉÉ 	
SendToClient
ÑÑ 
(
ÑÑ 
sm
ÑÑ 
,
ÑÑ 
dests
ÑÑ "
.
ÑÑ" #
AsEnumerable
ÑÑ# /
(
ÑÑ/ 0
)
ÑÑ0 1
,
ÑÑ1 2
obj
ÑÑ3 6
)
ÑÑ6 7
;
ÑÑ7 8
dests
ÖÖ 
=
ÖÖ 
null
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
private
àà 
void
àà 
SendToClient
àà !
(
àà! "
SocketMessage
àà" /
sm
àà0 2
,
àà2 3
IEnumerable
àà4 ?
<
àà? @
ulong
àà@ E
>
ààE F
dests
ààG L
,
ààL M
object
ààN T
obj
ààU X
=
ààY Z
null
àà[ _
)
àà_ `
{
ââ 	
if
ää 
(
ää 
dests
ää 
==
ää 
null
ää 
)
ää 
{
ãã 
Console
åå 
.
åå 
	WriteLine
åå !
(
åå! "
$str
åå" I
)
ååI J
;
ååJ K
return
çç 
;
çç 
}
éé 
if
èè 
(
èè 
dests
èè 
.
èè 
Count
èè 
(
èè 
)
èè 
==
èè  
$num
èè! "
)
èè" #
{
êê 
if
ëë 
(
ëë 
dests
ëë 
.
ëë 
First
ëë 
(
ëë  
)
ëë  !
==
ëë" $
ulong
ëë% *
.
ëë* +
MaxValue
ëë+ 3
)
ëë3 4
{
íí 
foreach
ìì 
(
ìì 
KeyValuePair
ìì )
<
ìì) *
ulong
ìì* /
,
ìì/ 0
Socket
ìì1 7
>
ìì7 8
soc
ìì9 <
in
ìì= ?
routingTable
ìì@ L
)
ììL M
if
îî 
(
îî 
soc
îî 
.
îî  
Key
îî  #
!=
îî$ &
sm
îî' )
.
îî) *
id
îî* ,
)
îî, -
SendToClient
ïï (
(
ïï( )
obj
ïï) ,
==
ïï- /
null
ïï0 4
?
ïï5 6
sm
ïï7 9
:
ïï: ;
obj
ïï< ?
,
ïï? @
soc
ïïA D
.
ïïD E
Value
ïïE J
)
ïïJ K
;
ïïK L
}
ññ 
}
óó 
else
òò 
if
òò 
(
òò 
dests
òò 
.
òò 
Count
òò  
(
òò  !
)
òò! "
>
òò# $
$num
òò% &
)
òò& '
{
ôô 
foreach
öö 
(
öö 
KeyValuePair
öö %
<
öö% &
ulong
öö& +
,
öö+ ,
Socket
öö- 3
>
öö3 4
soc
öö5 8
in
öö9 ;
routingTable
öö< H
.
ööH I
Where
ööI N
(
ööN O
x
ööO P
=>
ööQ S
dests
ööT Y
.
ööY Z
Contains
ööZ b
(
ööb c
x
ööc d
.
ööd e
Key
ööe h
)
ööh i
)
ööi j
)
ööj k
if
õõ 
(
õõ 
soc
õõ 
.
õõ 
Key
õõ 
!=
õõ  "
sm
õõ# %
.
õõ% &
id
õõ& (
)
õõ( )
SendToClient
úú $
(
úú$ %
obj
úú% (
==
úú) +
null
úú, 0
?
úú1 2
sm
úú3 5
:
úú6 7
obj
úú8 ;
,
úú; <
soc
úú= @
.
úú@ A
Value
úúA F
)
úúF G
;
úúG H
}
ùù 
else
ûû 
{
üü 
Console
°° 
.
°° 
	WriteLine
°° !
(
°°! "
$str
°°" V
)
°°V W
;
°°W X
}
¢¢ 
}
££ 	
private
©© 
void
©© 
DoServerError
©© "
(
©©" #
string
©©# )
msg
©©* -
,
©©- .
ulong
©©/ 4
id
©©5 7
=
©©8 9
$num
©©: ;
,
©©; <
bool
©©= A
dis
©©B E
=
©©F G
false
©©H M
)
©©M N
{
™™ 	

PoliteStop
´´ 
(
´´ 
dis
´´ 
,
´´ 
id
´´ 
)
´´ 
;
´´  
myLogger
¨¨ 
.
¨¨ 
Log
¨¨ 
(
¨¨ 
$str
¨¨ 6
+
¨¨7 8
msg
¨¨9 <
,
¨¨< =
id
≠≠ 
==
≠≠ 
$num
≠≠ 
?
≠≠ 
$str
≠≠ 
:
≠≠ 
string
≠≠ %
.
≠≠% &
Format
≠≠& ,
(
≠≠, -
$str
≠≠- B
,
≠≠B C
id
≠≠D F
)
≠≠F G
)
≠≠G H
;
≠≠H I
}
ÆÆ 	
private
∞∞ 
void
∞∞ 
CloseAllClients
∞∞ $
(
∞∞$ %
ulong
∞∞% *
id
∞∞+ -
=
∞∞. /
$num
∞∞0 1
)
∞∞1 2
{
±± 	
if
≤≤ 
(
≤≤ 
id
≤≤ 
>
≤≤ 
$num
≤≤ 
)
≤≤ 
SendToClient
≤≤ $
(
≤≤$ %
SocketManager
≤≤% 2
.
≤≤2 3
PoliteClose
≤≤3 >
(
≤≤> ?
id
≤≤? A
)
≤≤A B
,
≤≤B C
routingTable
≤≤D P
[
≤≤P Q
id
≤≤Q S
]
≤≤S T
)
≤≤T U
;
≤≤U V
myLogger
≥≥ 
.
≥≥ 
Log
≥≥ 
(
≥≥ 
$str
≥≥ =
,
≥≥= >
routingTable
≥≥? K
.
≥≥K L
Count
≥≥L Q
)
≥≥Q R
;
≥≥R S
foreach
¥¥ 
(
¥¥ 
KeyValuePair
¥¥ !
<
¥¥! "
ulong
¥¥" '
,
¥¥' (
Socket
¥¥) /
>
¥¥/ 0
soc
¥¥1 4
in
¥¥5 7
routingTable
¥¥8 D
)
¥¥D E
{
µµ 
if
∂∂ 
(
∂∂ 
soc
∂∂ 
.
∂∂ 
Key
∂∂ 
!=
∂∂ 
id
∂∂ !
)
∂∂! "
{
∑∑ 
myLogger
∏∏ 
.
∏∏ 
Log
∏∏  
(
∏∏  !
$str
∏∏! H
,
∏∏H I
soc
∏∏J M
.
∏∏M N
Key
∏∏N Q
)
∏∏Q R
;
∏∏R S
SendToClient
ππ  
(
ππ  !
SocketManager
ππ! .
.
ππ. /
PoliteClose
ππ/ :
(
ππ: ;
soc
ππ; >
.
ππ> ?
Key
ππ? B
)
ππB C
,
ππC D
soc
ππE H
.
ππH I
Value
ππI N
)
ππN O
;
ππO P
}
∫∫ 
}
ªª 
}
ºº 	
private
ææ 
void
ææ *
CloseServerAfterClientsClose
ææ 1
(
ææ1 2
bool
ææ2 6
dis
ææ7 :
)
ææ: ;
{
øø 	
if
¿¿ 
(
¿¿ 
routingTable
¿¿ 
.
¿¿ 
Count
¿¿ "
==
¿¿# %
$num
¿¿& '
)
¿¿' (
Stop
¡¡ 
(
¡¡ 
dis
¡¡ 
)
¡¡ 
;
¡¡ 
}
¬¬ 	
public
ƒƒ 
void
ƒƒ 

PoliteStop
ƒƒ 
(
ƒƒ 
bool
ƒƒ #
dis
ƒƒ$ '
=
ƒƒ( )
false
ƒƒ* /
,
ƒƒ/ 0
ulong
ƒƒ1 6
id
ƒƒ7 9
=
ƒƒ: ;
$num
ƒƒ< =
)
ƒƒ= >
{
≈≈ 	
dispose
∆∆ 
=
∆∆ 
dis
∆∆ 
;
∆∆ 
CloseAllClients
«« 
(
«« 
id
«« 
)
«« 
;
««  
}
»» 	
private
ÕÕ 
void
ÕÕ 
Stop
ÕÕ 
(
ÕÕ 
bool
ÕÕ 
dis
ÕÕ "
=
ÕÕ# $
true
ÕÕ% )
)
ÕÕ) *
{
ŒŒ 	
if
œœ 
(
œœ 
_state
œœ 
==
œœ 
SocketState
œœ %
.
œœ% &
ServerStarted
œœ& 3
)
œœ3 4
{
–– 
try
—— 
{
““ 
myLogger
”” 
.
”” 
Log
””  
(
””  !
$str
””! 1
)
””1 2
;
””2 3
_state
’’ 
=
’’ 
SocketState
’’ (
.
’’( )
ServerStopped
’’) 6
;
’’6 7
if
÷÷ 
(
÷÷ 
ServerSocket
÷÷ $
.
÷÷$ %
	Connected
÷÷% .
)
÷÷. /
ServerSocket
◊◊ $
.
◊◊$ %
Shutdown
◊◊% -
(
◊◊- .
SocketShutdown
◊◊. <
.
◊◊< =
Both
◊◊= A
)
◊◊A B
;
◊◊B C
ServerSocket
ŸŸ  
.
ŸŸ  !
Close
ŸŸ! &
(
ŸŸ& '
)
ŸŸ' (
;
ŸŸ( )
if
€€ 
(
€€ 
dis
€€ 
)
€€ 
{
‹‹ 
ServerSocket
ﬁﬁ $
=
ﬁﬁ% &
null
ﬁﬁ' +
;
ﬁﬁ+ ,
}
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
··  
ex
··! #
)
··# $
{
‚‚ 
myLogger
„„ 
.
„„ 
Log
„„  
(
„„  !
$str
„„! R
+
„„S T
ex
„„U W
)
„„W X
;
„„X Y
}
‰‰ 
}
ÂÂ 
else
ÊÊ 
myLogger
ÁÁ 
.
ÁÁ 
Log
ÁÁ 
(
ÁÁ 
$str
ÁÁ W
)
ÁÁW X
;
ÁÁX Y
}
ËË 	
private
ÍÍ 
bool
ÍÍ 
disposed
ÍÍ 
;
ÍÍ 
public
ÌÌ 
void
ÌÌ 
Dispose
ÌÌ 
(
ÌÌ 
)
ÌÌ 
{
ÓÓ 	
Dispose
ÔÔ 
(
ÔÔ 
true
ÔÔ 
)
ÔÔ 
;
ÔÔ 
GC
 
.
 
SuppressFinalize
 
(
  
this
  $
)
$ %
;
% &
}
ÒÒ 	
	protected
ÙÙ 
virtual
ÙÙ 
void
ÙÙ 
Dispose
ÙÙ &
(
ÙÙ& '
bool
ÙÙ' +
	disposing
ÙÙ, 5
)
ÙÙ5 6
{
ıı 	
if
ˆˆ 
(
ˆˆ 
disposed
ˆˆ 
)
ˆˆ 
return
˜˜ 
;
˜˜ 
if
˘˘ 
(
˘˘ 
	disposing
˘˘ 
)
˘˘ 
{
˙˙ 
myLogger
˚˚ 
.
˚˚ 
Log
˚˚ 
(
˚˚ 
$str
˚˚ /
)
˚˚/ 0
;
˚˚0 1

PoliteStop
¸¸ 
(
¸¸ 
true
¸¸ 
)
¸¸  
;
¸¸  !
}
ˇˇ 
disposed
ÉÉ 
=
ÉÉ 
true
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
}
ââ 
}ää 